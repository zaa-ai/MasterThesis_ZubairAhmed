## macros
#macro(hex $value)
#set($intValue = $tools.parseInteger($value))
$tools.format("%x", $intValue)#end
#macro(access $value)
#if($value == "R/W")rw#end
#if($value == "RW")rw#end
#if($value == "R")ro#end
#if($value == "W")wo#end
#if($value == "W1C")w1c#end
#if($value == "W1S")w1s#end
#end
#macro(instanceCount $name)
#set($count = 0)
#foreach($entry in $instanceGroups.values())
#if($entry == $name)#set($count = $math.add($count,1))#end
#end	
$count#end

## File Header
#[[#==================================================
# Copyright (c) $date.toString("yyyy") Elmos SE
# Author: stove
# Description : Note: This file has been generated automatically by stove
#               Note: This file should not be modified manually.
#               This file is the RAL file for generating the UVM test register model
#==================================================]]#
## collect list of functional/applicative instances ("func" as EDF Instance Table Category)
#set($funcInstances = $edfTool.getInstances("test"))
## register file declarations including all registers and fields 
#set($usedRegisterTables = []) ## list of already processed register tables
#foreach($instance in $funcInstances)
#set($registerTables = $edfTool.getRegisterTables($instance))
#foreach($registerTable in $registerTables)
#set($registerTableName = $registerTable.name.replaceAll(" ", "_"))
#if(!$usedRegisterTables.contains($registerTableName))
#set($bla = $usedRegisterTables.add($registerTableName))
regfile $registerTableName {
#foreach($register in $registerTable.children)

  register $register.name (i_${registerTableName}.i_${registerTableName}_${register.name}) @'h#hex($register.address) {
    doc {
      $register.description
    }
#if($register.getProperty("stove", "uvmAttributes") && !$register.getProperty("stove", "uvmAttributes").empty) 
    attributes {
      $register.getProperty("stove", "uvmAttributes")
    }
#end    
#foreach($field  in $register.bitGroups)
#if($field.name == "-")
    field unused {
      bits $field.bitWidth;
    }
#else

    field $field.name (${field.name}) {
      doc {
        $field.description
      }
      bits $field.bitWidth;
      access #access($field.externAccess);
      reset $tools.parseInteger($field.resetValue);
    }
#end     
#end
  }
#end
}
#end 
   
#end
#end 

## block declaration 
#set($usedBlocks = [])## list of already processed blocks
#foreach($instance in $funcInstances)
#set($registerTables = $edfTool.getRegisterTables($instance))
#set($block = $project.getById($instance.linkedBlockId))
#if($block.schematic != "")
#if($registerTables.size() > 0)
#if(!$usedBlocks.contains($block.schematic))
#set($bla = $usedBlocks.add($block.schematic))
block $block.schematic {
  bytes 4;

#foreach($registerTable in $registerTables)
  regfile $registerTable.name.replaceAll(" ", "_") @'h0;
#end
}

#end
#end
#end
#end
##
## some constants/configuration
##
#set($usedInstanceGroups = []) ## list of already processed instance groups
#set($instanceGroups = {})     ## definition of instance groups
#set($instanceIncrement = {})     ## definition of instance length (increment)
##
#set($instanceGroups["TEST_DSI_0"] = "TEST_DSI")
#set($instanceGroups["TEST_DSI_1"] = "TEST_DSI")
#set($instanceIncrement["TEST_DSI"] = "10")
##
## system declaration including all block instances
 
system jtag_test_registers {
  bytes 4;
	
#foreach($instance in $funcInstances)
	#set($instanceName = $instance.name.replaceAll("\W", "_"))
	#set($registerTables = $edfTool.getRegisterTables($instance))
	#set($block = $project.getById($instance.linkedBlockId))
	#if($block.schematic != "")
	#if($registerTables.size() > 0)
		#if($instanceGroups.containsKey($instanceName))
			#set($groupName = $instanceGroups.get($instanceName))
			#if(!$usedInstanceGroups.contains($groupName))
			#set($bla = $usedInstanceGroups.add($groupName))
  block $block.schematic=${groupName}[#instanceCount($groupName)] #if($instance.hdlPath != "")($instance.hdlPath.trim()) #end@'h#hex($instance.baseAddress) +'h$instanceIncrement.get($groupName);
			#end
		#else
  block $block.schematic=$instanceName #if($instance.hdlPath != "")($instance.hdlPath.trim()) #end@'h#hex($instance.baseAddress);
		#end
	#end
	#end	
#end
}