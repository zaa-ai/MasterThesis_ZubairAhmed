## File Header
//==================================================
// Copyright (c) $date.toString("yyyy") Elmos SE
// Author: stove
// Description : Note: This file has been generated automatically by stove
//               Note: This file should not be modified manually.
//               This file contains the Excluded objects
//==================================================
##
## some constants/configuration
##
#set($registerCount = {})  ## counts register occurrence
##

#set($registerWidth = 16)
#set($logic_top = "top_tb.th.i_dut_wrapper.xtop.xdigtop.i_logic_top")

#set($funcInstances = $edfTool.getInstances($args.get("category")))
#set($excludeRegisterTables = $args.get("excludeTable"))
#if($excludeRegisterTables)#set($excludeRegisterTables = $args.get("excludeTable").split(","))#else#set($excludeRegisterTables = [])#end
$log.info("exclude:$excludeRegisterTables")
#foreach($instance in $funcInstances)
	#set($instanceName = $instance.name.replaceAll("\W", "_"))
	#set($registerTables = $edfTool.getRegisterTables($instance))
	#set($block = $project.getById($instance.linkedBlockId))
	#if($block.schematic != "")
		#if($registerTables.size() > 0)
			#foreach($registerTable in $registerTables)
				#set($registerTableName = $registerTable.name.replaceAll(" ", "_"))
				#if(!($excludeRegisterTables.contains($registerTableName)))
##$log.info("~~~~ parsing $registerTableName") 
					#set($accumulatedUsedFields = [])
					#foreach($edfRegister in $registerTable.children)
						#set($register = $edfTool.toStoveRegister($edfRegister))
						#set($unusedFields = $register.getAllUnusedFields($registerWidth))
						#if($unusedFields.size() != 0)
							#set($origPath = "${logic_top}.$instance.hdlPath.trim().${registerTableName}_${register.name}")
							#set($instanceIndex = 0)
							#if($registerCount.containsKey($origPath))
								#set($instanceIndex = $registerCount.get($origPath))	
							#end
							#set($path = $origPath.replaceAll("%g", "$instanceIndex"))
INSTANCE: $path
							#foreach($field in $unusedFields)
								#set($start = $field.lsb)
								#set($end = $math.add($field.lsb, $field.bits))
								#set($end = $math.sub($end, 1))
								#foreach($i in [$start..$end])
Toggle value [$i] "logic value[15:0]"
								#end
							#end
							#set($path = "${logic_top}.${instance.hdlPath.trim()}.i_${registerTableName}")
							#set($path = $path.replaceAll("%g", "$instanceIndex"))
INSTANCE: $path
							#foreach($field in $unusedFields)
								#set($start = $field.lsb)
								#set($end = $math.add($field.lsb, $field.bits))
								#set($end = $math.sub($end, 1))
								#foreach($i in [$start..$end])
Toggle data_out_${register.name} [$i] "logic data_out_${register.name}[15:0]"
								#end
							#end
							#set($path = "${logic_top}.${instance.hdlPath.trim()}.i_${registerTableName}.i_${registerTableName}_${register.name}")
							#set($path = $path.replaceAll("%g", "$instanceIndex"))
INSTANCE: $path
							#foreach($field in $unusedFields)
								#set($start = $field.lsb)
								#set($end = $math.add($field.lsb, $field.bits))
								#set($end = $math.sub($end, 1))
								#foreach($i in [$start..$end])
Toggle data_out [$i] "logic data_out[15:0]"
								#end
							#end
							#set($bla = $registerCount.put($origPath, $math.add($instanceIndex, 1)))
						#end
						#foreach($field in $register.getAllUsedFields())
							#set($start = $field.lsb)
							#set($end = $math.add($field.lsb, $field.bits))
							#set($end = $math.sub($end, 1))
							#set($tmp = $accumulatedUsedFields.add({"high":$number.toNumber($end),"low":$number.toNumber($start)}))
						#end
					#end
##$log.info("accumulatedUsedFields:$accumulatedUsedFields")
					#set($bitsNotUsed = [])
					#foreach($i in [0..15])
						#set($isUsed = false)
						#foreach($field in $accumulatedUsedFields)
							#if((($i<=$field.high) && ($i>=$field.low)))
								#set($isUsed = true)
							#end
						#end
						#if(!$isUsed)
							#set($tmp = $bitsNotUsed.add($i)) 
						#end
					#end
					#if ($bitsNotUsed.size() > 0)
						#set($path = "${logic_top}.${instance.hdlPath.trim()}.i_${registerTableName}")
						#set($path = $path.replaceAll("%g", "$instanceIndex"))
INSTANCE: $path
						#foreach($bitNotUsed in $bitsNotUsed)
Toggle data_out [$bitNotUsed] "logic data_out[15:0]"
						#end
					#end
##$log.info("$registerTableName: bits not used:$bitsNotUsed")
				#end
			#end
		#end
	#end	
#end