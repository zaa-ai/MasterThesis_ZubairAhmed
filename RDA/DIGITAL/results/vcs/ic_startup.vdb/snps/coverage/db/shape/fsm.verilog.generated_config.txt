// Synopsys, Inc.
// User: zaa
// Date: Thu May 22 12:42:54 2025

// ==================================================================================================
// This config file prototype is produced from the last run using the complete list of extracted fsms.
// Please note that by providing your own description of the module you are enforcing what will be
// extracted for that module.
// Copy this file to your source directory and edit it as described below,
// then pass the file to VCS using the -cm_fsmcfg command line option.
// FSMs will be extracted normally for any module not mentioned in this file
// ==================================================================================================
// 1. For every module that you want to specify yourself, use:
//      MODULE==name
//    -----------------------------------------------------
//    The following options are defining the behavior on the module level.
//    -----------------------------------------------------
//    1.1  You can control what fsms should be used within this module:
//            FSMS=AUTO
//            this means that you want VCS to automatically extract all
//            detectable FSMs from this module.
//            -----------------------------------------------------
//            FSMS=EXCLUDE
//            this means that you want all fsms except the ones from the list that follows
//            if the list is empty, all fsms will be extracted for this module
//            -----------------------------------------------------
//            FSMS=RESTRICT
//            this means that you want only the fsms from the list that follows
//            if the list is empty, no fsms will be extracted for this module
//            -----------------------------------------------------
//         If none of these options are specified, the program will assume FSMS=RESTRICT
//         -----------------------------------------------------
//     1.2 You can specify that the state with the minimal value should be used as a
//         start state for all sequences in every fsm in the module.
//            FSMS=START_STATE_DFLT
//         For any particular fsm you can overwrite this behavior inside its description.
//    -----------------------------------------------------
// 2. Each fsm description in the list of fsms should be specified as follows:
//      2.1 provide the current state variable declaration:
//          CURRENT= name of the current state variable
//      -----------------------------------------------------
//      2.2 if next state variable is different from the current state provide:
//          NEXT= next state variable
//          if you don't use NEXT=, the program will assume that CURRENT and NEXT are the same
//      -----------------------------------------------------
//      2.3 if you want to provide the restrictive the list of states, provide:
//          STATES= s0,s1 etc. where s0 is either a name or a value of the state
//          if you don't use STATES=, the program will assume that you want to use all states
//      -----------------------------------------------------
//      2.4 if you want to ignore some states, specify them in the following list:
//          STATES_X= s0,s1, etc.
//      -----------------------------------------------------
//      2.5 if you want to mark, that some states should never be reached, specify them as a list:
//          STATES_NEVER= s0,s1, etc.
//      -----------------------------------------------------
//      2.6 similar to the STATES, if you want to provide the restrictive the list of transitions, specify:
//          TRANSITIONS= s0->s1,s1->s2, etc.
//      -----------------------------------------------------
//      2.7 similar to the STATES_X, if you want to ignore some transitions, specify them in the following list:
//          TRANSITIONS_X= s0->s1,s1->s2, etc.
//      -----------------------------------------------------
//      2.8 similar to the STATES_NEVER,if you want to mark, that some transitions should never occur,
//          specify them as a list:
//          TRANSITIONS_NEVER= s0->s1,s1->s2,     etc.
//      -----------------------------------------------------
//      2.9 if you want to specify the start state use:
//          START_STATE= s0
//      -----------------------------------------------------
//      Please note:
//          - that a state in every list can be specified either by name or by value.
//          - in specifying the transitions you can use * in order to refer to 'any' state.
// ==================================================================================================
// Uncomment and modify the following 2 line to override default FSM sequence limits for all FSMs in the design.
//SEQ_NUMBER_MAX=10000
//SEQ_LENGTH_MAX=32

MODULE=clock_auto_trimming
CURRENT=trim_state
NEXT=trim_state_nxt
STATES=IDLE,START_TRIMMING,STOPPED,TRIMMING
TRANSITIONS=IDLE->START_TRIMMING,
START_TRIMMING->IDLE,
START_TRIMMING->TRIMMING,
STOPPED->IDLE,
TRIMMING->IDLE,
TRIMMING->STOPPED
MODULE=dsi3_crm_data_writer
CURRENT=data_state
NEXT=data_state_next
STATES=DATA_CLEAR_BUFFER,DATA_FINISH_PACKET,DATA_IDLE,DATA_INVALIDATE,DATA_STORE_DATA,DATA_VALIDATE,DATA_WAIT,DATA_WRITE_EMPTY_HEADER
TRANSITIONS=DATA_CLEAR_BUFFER->DATA_IDLE,
DATA_CLEAR_BUFFER->DATA_INVALIDATE,
DATA_FINISH_PACKET->DATA_IDLE,
DATA_FINISH_PACKET->DATA_INVALIDATE,
DATA_FINISH_PACKET->DATA_VALIDATE,
DATA_IDLE->DATA_CLEAR_BUFFER,
DATA_IDLE->DATA_INVALIDATE,
DATA_IDLE->DATA_STORE_DATA,
DATA_IDLE->DATA_VALIDATE,
DATA_IDLE->DATA_WRITE_EMPTY_HEADER,
DATA_INVALIDATE->DATA_IDLE,
DATA_STORE_DATA->DATA_IDLE,
DATA_STORE_DATA->DATA_INVALIDATE,
DATA_STORE_DATA->DATA_WAIT,
DATA_VALIDATE->DATA_IDLE,
DATA_VALIDATE->DATA_INVALIDATE,
DATA_WAIT->DATA_CLEAR_BUFFER,
DATA_WAIT->DATA_FINISH_PACKET,
DATA_WAIT->DATA_IDLE,
DATA_WAIT->DATA_INVALIDATE,
DATA_WAIT->DATA_STORE_DATA,
DATA_WRITE_EMPTY_HEADER->DATA_IDLE,
DATA_WRITE_EMPTY_HEADER->DATA_INVALIDATE
MODULE=dsi3_core
CURRENT=dsi_state
NEXT=dsi_state_nxt
STATES=DM_CHECK_SLAVE,DM_PULSE,DM_SETUP,DM_WAIT_FOR_NEXT,DM_WAIT_FOR_PULSE,DM_WAIT_FOR_SLAVE,DSI_IDLE,RECEIVE,TRANSMIT
TRANSITIONS=DM_CHECK_SLAVE->DM_WAIT_FOR_NEXT,
DM_CHECK_SLAVE->DSI_IDLE,
DM_PULSE->DM_WAIT_FOR_SLAVE,
DM_PULSE->DSI_IDLE,
DM_SETUP->DM_WAIT_FOR_PULSE,
DM_SETUP->DSI_IDLE,
DM_WAIT_FOR_NEXT->DM_SETUP,
DM_WAIT_FOR_NEXT->DSI_IDLE,
DM_WAIT_FOR_PULSE->DM_PULSE,
DM_WAIT_FOR_PULSE->DSI_IDLE,
DM_WAIT_FOR_SLAVE->DM_CHECK_SLAVE,
DM_WAIT_FOR_SLAVE->DSI_IDLE,
DSI_IDLE->DM_SETUP,
DSI_IDLE->TRANSMIT,
RECEIVE->DSI_IDLE,
TRANSMIT->DSI_IDLE,
TRANSMIT->RECEIVE
MODULE=pdcm_frame_reader
CURRENT=state
NEXT=state_next
STATES=DELETE_NOT_READ_DATA,FINISH_FRAME,IDLE,READ_DATA,READ_DATA_NEXT,READ_EMPTY_FRAME
TRANSITIONS=DELETE_NOT_READ_DATA->FINISH_FRAME,
DELETE_NOT_READ_DATA->IDLE,
FINISH_FRAME->IDLE,
IDLE->FINISH_FRAME,
IDLE->READ_DATA_NEXT,
IDLE->READ_EMPTY_FRAME,
READ_DATA->DELETE_NOT_READ_DATA,
READ_DATA->FINISH_FRAME,
READ_DATA->IDLE,
READ_DATA->READ_DATA_NEXT,
READ_DATA->READ_EMPTY_FRAME,
READ_DATA_NEXT->DELETE_NOT_READ_DATA,
READ_DATA_NEXT->IDLE,
READ_DATA_NEXT->READ_DATA,
READ_EMPTY_FRAME->FINISH_FRAME,
READ_EMPTY_FRAME->IDLE
MODULE=dsi3_block
CURRENT=state
NEXT=state_next
STATES=DECODE,DSI_CRM_GET_DATA_HIGH,DSI_CRM_GET_DATA_LOW,DSI_CRM_WAIT,DSI_CRM_WAIT_FOR_START,DSI_DM_WAIT,DSI_DM_WAIT_FOR_START,DSI_ILOAD_WAIT,DSI_ILOAD_WAIT_FOR_START,DSI_PDCM_WAIT,DSI_PDCM_WAIT_FOR_START,DSI_READ_WAIT_TIME,DSI_SYNC,DSI_SYNC_START,DSI_UPLOAD_TDMA_PACKET,DSI_UPLOAD_TDMA_PACKET_EARLIEST,DSI_UPLOAD_TDMA_PACKET_INFO,DSI_UPLOAD_TDMA_PACKET_LATEST,DSI_VALIDATE_TDMA,DSI_VALIDATE_TDMA_PERIOD,DSI_VALIDATE_WRITE_HEADER,DSI_WAITING,DSI_WAITING_WAIT_FOR_START,IDLE
TRANSITIONS=DECODE->DSI_CRM_GET_DATA_HIGH,
DECODE->DSI_DM_WAIT_FOR_START,
DECODE->DSI_ILOAD_WAIT_FOR_START,
DECODE->DSI_PDCM_WAIT_FOR_START,
DECODE->DSI_READ_WAIT_TIME,
DECODE->DSI_SYNC_START,
DECODE->DSI_UPLOAD_TDMA_PACKET_EARLIEST,
DECODE->DSI_VALIDATE_TDMA_PERIOD,
DECODE->IDLE,
DSI_CRM_GET_DATA_HIGH->DSI_CRM_GET_DATA_LOW,
DSI_CRM_GET_DATA_HIGH->IDLE,
DSI_CRM_GET_DATA_LOW->DSI_CRM_WAIT_FOR_START,
DSI_CRM_GET_DATA_LOW->IDLE,
DSI_CRM_WAIT->IDLE,
DSI_CRM_WAIT_FOR_START->DSI_CRM_WAIT,
DSI_CRM_WAIT_FOR_START->IDLE,
DSI_DM_WAIT->IDLE,
DSI_DM_WAIT_FOR_START->DSI_DM_WAIT,
DSI_DM_WAIT_FOR_START->IDLE,
DSI_ILOAD_WAIT->IDLE,
DSI_ILOAD_WAIT_FOR_START->DSI_ILOAD_WAIT,
DSI_ILOAD_WAIT_FOR_START->IDLE,
DSI_PDCM_WAIT->IDLE,
DSI_PDCM_WAIT_FOR_START->DSI_PDCM_WAIT,
DSI_PDCM_WAIT_FOR_START->IDLE,
DSI_READ_WAIT_TIME->DSI_WAITING_WAIT_FOR_START,
DSI_READ_WAIT_TIME->IDLE,
DSI_SYNC->IDLE,
DSI_SYNC_START->DSI_SYNC,
DSI_SYNC_START->IDLE,
DSI_UPLOAD_TDMA_PACKET->IDLE,
DSI_UPLOAD_TDMA_PACKET_EARLIEST->DSI_UPLOAD_TDMA_PACKET_LATEST,
DSI_UPLOAD_TDMA_PACKET_EARLIEST->IDLE,
DSI_UPLOAD_TDMA_PACKET_INFO->DSI_UPLOAD_TDMA_PACKET,
DSI_UPLOAD_TDMA_PACKET_INFO->IDLE,
DSI_UPLOAD_TDMA_PACKET_LATEST->DSI_UPLOAD_TDMA_PACKET_INFO,
DSI_UPLOAD_TDMA_PACKET_LATEST->IDLE,
DSI_VALIDATE_TDMA->IDLE,
DSI_VALIDATE_TDMA_PERIOD->DSI_VALIDATE_WRITE_HEADER,
DSI_VALIDATE_TDMA_PERIOD->IDLE,
DSI_VALIDATE_WRITE_HEADER->DSI_VALIDATE_TDMA,
DSI_VALIDATE_WRITE_HEADER->IDLE,
DSI_WAITING->IDLE,
DSI_WAITING_WAIT_FOR_START->DSI_WAITING,
DSI_WAITING_WAIT_FOR_START->IDLE,
IDLE->DECODE
MODULE=dsi3_receive_sampling
CURRENT=state
NEXT=state_next
STATES=RECEIVE,RECEIVE_FIRST_CHIP,RECEIVE_IDLE
TRANSITIONS=RECEIVE->RECEIVE_IDLE,
RECEIVE_FIRST_CHIP->RECEIVE,
RECEIVE_FIRST_CHIP->RECEIVE_IDLE,
RECEIVE_IDLE->RECEIVE_FIRST_CHIP
MODULE=jtag_tap
CURRENT=tap_state
NEXT=tap_state_nxt
STATES=TS_CAPTURE_DR,TS_CAPTURE_IR,TS_EXIT1_DR,TS_EXIT1_IR,TS_EXIT2_DR,TS_EXIT2_IR,TS_PAUSE_DR,TS_PAUSE_IR,TS_RESET,TS_RUN,TS_SELECT_DR,TS_SELECT_IR,TS_SHIFT_DR,TS_SHIFT_IR,TS_UPDATE_DR,TS_UPDATE_IR
TRANSITIONS=TS_CAPTURE_DR->TS_EXIT1_DR,
TS_CAPTURE_DR->TS_RESET,
TS_CAPTURE_DR->TS_SHIFT_DR,
TS_CAPTURE_IR->TS_EXIT1_IR,
TS_CAPTURE_IR->TS_RESET,
TS_CAPTURE_IR->TS_SHIFT_IR,
TS_EXIT1_DR->TS_PAUSE_DR,
TS_EXIT1_DR->TS_RESET,
TS_EXIT1_DR->TS_UPDATE_DR,
TS_EXIT1_IR->TS_PAUSE_IR,
TS_EXIT1_IR->TS_RESET,
TS_EXIT1_IR->TS_UPDATE_IR,
TS_EXIT2_DR->TS_RESET,
TS_EXIT2_DR->TS_SHIFT_DR,
TS_EXIT2_DR->TS_UPDATE_DR,
TS_EXIT2_IR->TS_RESET,
TS_EXIT2_IR->TS_SHIFT_IR,
TS_EXIT2_IR->TS_UPDATE_IR,
TS_PAUSE_DR->TS_EXIT2_DR,
TS_PAUSE_DR->TS_RESET,
TS_PAUSE_IR->TS_EXIT2_IR,
TS_PAUSE_IR->TS_RESET,
TS_RESET->TS_RUN,
TS_RUN->TS_RESET,
TS_RUN->TS_SELECT_DR,
TS_SELECT_DR->TS_CAPTURE_DR,
TS_SELECT_DR->TS_RESET,
TS_SELECT_DR->TS_SELECT_IR,
TS_SELECT_IR->TS_CAPTURE_IR,
TS_SELECT_IR->TS_RESET,
TS_SHIFT_DR->TS_EXIT1_DR,
TS_SHIFT_DR->TS_RESET,
TS_SHIFT_IR->TS_EXIT1_IR,
TS_SHIFT_IR->TS_RESET,
TS_UPDATE_DR->TS_RESET,
TS_UPDATE_DR->TS_RUN,
TS_UPDATE_DR->TS_SELECT_DR,
TS_UPDATE_IR->TS_RESET,
TS_UPDATE_IR->TS_RUN,
TS_UPDATE_IR->TS_SELECT_DR
MODULE=main_fsm
CURRENT=state
NEXT=state_next
STATES=CHECK_ADDRESS,POWERED_UP,PREPARE_WRITE_DATA,RAM_ZEROING,READ_HIGH_ADDRESS,READ_HIGH_DATA,READ_LOW_ADDRESS,READ_LOW_DATA,RESET,WAITING_AFTER_TRIMMING,WAIT_FOR_LDO_OK,WAIT_FOR_VCC_OK,WAIT_FOR_VRR_OK,WRITE_DATA
TRANSITIONS=CHECK_ADDRESS->READ_HIGH_ADDRESS,
CHECK_ADDRESS->READ_HIGH_DATA,
CHECK_ADDRESS->RESET,
CHECK_ADDRESS->WAITING_AFTER_TRIMMING,
POWERED_UP->RESET,
PREPARE_WRITE_DATA->READ_HIGH_ADDRESS,
PREPARE_WRITE_DATA->RESET,
PREPARE_WRITE_DATA->WAITING_AFTER_TRIMMING,
PREPARE_WRITE_DATA->WRITE_DATA,
RAM_ZEROING->RESET,
RAM_ZEROING->WAIT_FOR_LDO_OK,
READ_HIGH_ADDRESS->READ_LOW_ADDRESS,
READ_HIGH_ADDRESS->RESET,
READ_HIGH_DATA->READ_LOW_DATA,
READ_HIGH_DATA->RESET,
READ_LOW_ADDRESS->CHECK_ADDRESS,
READ_LOW_ADDRESS->RESET,
READ_LOW_DATA->PREPARE_WRITE_DATA,
READ_LOW_DATA->RESET,
RESET->WAIT_FOR_VCC_OK,
WAITING_AFTER_TRIMMING->RAM_ZEROING,
WAITING_AFTER_TRIMMING->RESET,
WAIT_FOR_LDO_OK->POWERED_UP,
WAIT_FOR_LDO_OK->RESET,
WAIT_FOR_VCC_OK->RESET,
WAIT_FOR_VCC_OK->WAIT_FOR_VRR_OK,
WAIT_FOR_VRR_OK->READ_HIGH_ADDRESS,
WAIT_FOR_VRR_OK->RESET,
WRITE_DATA->READ_HIGH_ADDRESS,
WRITE_DATA->RESET,
WRITE_DATA->WAITING_AFTER_TRIMMING
MODULE=dsi3_pdcm_data_writer
CURRENT=data_state
NEXT=data_state_next
STATES=DATA_CLEAR_BUFFER,DATA_FINISH_FRAME,DATA_FINISH_PACKET,DATA_IDLE,DATA_INITIALIZE_TDMA,DATA_INVALIDATE,DATA_READ_NEXT_TDMA_PACKET,DATA_STORE_DATA,DATA_VALIDATE,DATA_WAIT_FOR_DATA,DATA_WAIT_FOR_PACKET,DATA_WRITE_EMPTY_DATA,DATA_WRITE_EMPTY_FRAME_HEADER,DATA_WRITE_EMPTY_PACKET_HEADER
TRANSITIONS=DATA_CLEAR_BUFFER->DATA_IDLE,
DATA_CLEAR_BUFFER->DATA_INVALIDATE,
DATA_FINISH_FRAME->DATA_IDLE,
DATA_FINISH_FRAME->DATA_INVALIDATE,
DATA_FINISH_FRAME->DATA_VALIDATE,
DATA_FINISH_PACKET->DATA_IDLE,
DATA_FINISH_PACKET->DATA_INVALIDATE,
DATA_FINISH_PACKET->DATA_READ_NEXT_TDMA_PACKET,
DATA_FINISH_PACKET->DATA_WRITE_EMPTY_DATA,
DATA_IDLE->DATA_CLEAR_BUFFER,
DATA_IDLE->DATA_INITIALIZE_TDMA,
DATA_IDLE->DATA_INVALIDATE,
DATA_INITIALIZE_TDMA->DATA_IDLE,
DATA_INITIALIZE_TDMA->DATA_INVALIDATE,
DATA_INITIALIZE_TDMA->DATA_WRITE_EMPTY_FRAME_HEADER,
DATA_INVALIDATE->DATA_IDLE,
DATA_READ_NEXT_TDMA_PACKET->DATA_IDLE,
DATA_READ_NEXT_TDMA_PACKET->DATA_INVALIDATE,
DATA_READ_NEXT_TDMA_PACKET->DATA_WAIT_FOR_PACKET,
DATA_STORE_DATA->DATA_IDLE,
DATA_STORE_DATA->DATA_INVALIDATE,
DATA_STORE_DATA->DATA_WAIT_FOR_DATA,
DATA_VALIDATE->DATA_IDLE,
DATA_VALIDATE->DATA_INVALIDATE,
DATA_WAIT_FOR_DATA->DATA_CLEAR_BUFFER,
DATA_WAIT_FOR_DATA->DATA_FINISH_PACKET,
DATA_WAIT_FOR_DATA->DATA_IDLE,
DATA_WAIT_FOR_DATA->DATA_INVALIDATE,
DATA_WAIT_FOR_DATA->DATA_STORE_DATA,
DATA_WAIT_FOR_PACKET->DATA_CLEAR_BUFFER,
DATA_WAIT_FOR_PACKET->DATA_FINISH_FRAME,
DATA_WAIT_FOR_PACKET->DATA_IDLE,
DATA_WAIT_FOR_PACKET->DATA_INVALIDATE,
DATA_WAIT_FOR_PACKET->DATA_WAIT_FOR_DATA,
DATA_WAIT_FOR_PACKET->DATA_WRITE_EMPTY_DATA,
DATA_WAIT_FOR_PACKET->DATA_WRITE_EMPTY_PACKET_HEADER,
DATA_WRITE_EMPTY_DATA->DATA_FINISH_PACKET,
DATA_WRITE_EMPTY_DATA->DATA_IDLE,
DATA_WRITE_EMPTY_DATA->DATA_INVALIDATE,
DATA_WRITE_EMPTY_FRAME_HEADER->DATA_IDLE,
DATA_WRITE_EMPTY_FRAME_HEADER->DATA_INVALIDATE,
DATA_WRITE_EMPTY_FRAME_HEADER->DATA_WAIT_FOR_PACKET,
DATA_WRITE_EMPTY_PACKET_HEADER->DATA_IDLE,
DATA_WRITE_EMPTY_PACKET_HEADER->DATA_INVALIDATE
MODULE=crm_packet_reader
CURRENT=state
NEXT=state_next
STATES=FINISH_PACKET,IDLE,READ_DATA,READ_HEADER
TRANSITIONS=FINISH_PACKET->IDLE,
IDLE->READ_HEADER,
READ_DATA->FINISH_PACKET,
READ_DATA->IDLE,
READ_HEADER->FINISH_PACKET,
READ_HEADER->IDLE,
READ_HEADER->READ_DATA
MODULE=otp_control
CURRENT=state
NEXT=state_nxt
STATES=IDLE,READ,WAIT_FOR_ACKNOWLEDGE
TRANSITIONS=IDLE->WAIT_FOR_ACKNOWLEDGE,
READ->IDLE,
WAIT_FOR_ACKNOWLEDGE->IDLE,
WAIT_FOR_ACKNOWLEDGE->READ
MODULE=utils_sram_bist_march_22n
CURRENT=sub_step
NEXT=sub_step
STATES='h0,'h1,'h2,'h3,'h4
TRANSITIONS='h0->'h1,
'h0->'h2,
'h0->'h4,
'h1->'h0,
'h1->'h2,
'h1->'h4,
'h2->'h0,
'h2->'h1,
'h2->'h4,
'h3->'h0,
'h3->'h1,
'h3->'h2,
'h3->'h4,
'h4->'h0,
'h4->'h1,
'h4->'h2,
'h4->'h3
MODULE=spi_fsm
CURRENT=state
NEXT=state_next
STATES=CHECK_MOSI_CRC,NO_COMMAND,READ_CRM_CHANNEL,READ_CRM_DATA,READ_CRM_FINISH,READ_NEXT_REGISTER,READ_PDCM_CHANNEL,READ_PDCM_FINISH,READ_PDCM_FRAME,READ_REGISTER,WAIT_FOR_NEXT_WORD,WRITE_COMMAND
TRANSITIONS=CHECK_MOSI_CRC->NO_COMMAND,
NO_COMMAND->CHECK_MOSI_CRC,
NO_COMMAND->READ_CRM_CHANNEL,
NO_COMMAND->READ_PDCM_CHANNEL,
NO_COMMAND->READ_REGISTER,
NO_COMMAND->WRITE_COMMAND,
READ_CRM_CHANNEL->NO_COMMAND,
READ_CRM_CHANNEL->READ_CRM_DATA,
READ_CRM_DATA->NO_COMMAND,
READ_CRM_DATA->READ_CRM_FINISH,
READ_CRM_FINISH->NO_COMMAND,
READ_CRM_FINISH->READ_CRM_CHANNEL,
READ_NEXT_REGISTER->NO_COMMAND,
READ_NEXT_REGISTER->READ_REGISTER,
READ_PDCM_CHANNEL->NO_COMMAND,
READ_PDCM_CHANNEL->READ_PDCM_FRAME,
READ_PDCM_FINISH->NO_COMMAND,
READ_PDCM_FINISH->READ_PDCM_CHANNEL,
READ_PDCM_FRAME->NO_COMMAND,
READ_PDCM_FRAME->READ_PDCM_CHANNEL,
READ_PDCM_FRAME->READ_PDCM_FINISH,
READ_REGISTER->NO_COMMAND,
READ_REGISTER->READ_NEXT_REGISTER,
WAIT_FOR_NEXT_WORD->NO_COMMAND,
WAIT_FOR_NEXT_WORD->WRITE_COMMAND,
WRITE_COMMAND->NO_COMMAND,
WRITE_COMMAND->WAIT_FOR_NEXT_WORD
MODULE=command_control
CURRENT=state
NEXT=state_next
STATES=CLEAR_DSI_COMMAND_QUEUE,CLEAR_DSI_DATA_BUFFER,DECODE,DELETE_DSI_COMMAND_QUEUE,DSI_INVALIDATE_BUFFERS,DSI_READ_NEXT_COMMAND_WORD,DSI_VALIDATE_BUFFER,DSI_WRITE_BUFFER,IDLE,WRITE_REGISTER_0,WRITE_REGISTER_1
TRANSITIONS=CLEAR_DSI_COMMAND_QUEUE->IDLE,
CLEAR_DSI_DATA_BUFFER->IDLE,
DECODE->CLEAR_DSI_COMMAND_QUEUE,
DECODE->CLEAR_DSI_DATA_BUFFER,
DECODE->DELETE_DSI_COMMAND_QUEUE,
DECODE->DSI_WRITE_BUFFER,
DECODE->IDLE,
DECODE->WRITE_REGISTER_0,
DELETE_DSI_COMMAND_QUEUE->DSI_INVALIDATE_BUFFERS,
DELETE_DSI_COMMAND_QUEUE->IDLE,
DSI_INVALIDATE_BUFFERS->IDLE,
DSI_READ_NEXT_COMMAND_WORD->DSI_INVALIDATE_BUFFERS,
DSI_READ_NEXT_COMMAND_WORD->DSI_WRITE_BUFFER,
DSI_READ_NEXT_COMMAND_WORD->IDLE,
DSI_VALIDATE_BUFFER->DSI_INVALIDATE_BUFFERS,
DSI_VALIDATE_BUFFER->IDLE,
DSI_WRITE_BUFFER->DSI_INVALIDATE_BUFFERS,
DSI_WRITE_BUFFER->DSI_READ_NEXT_COMMAND_WORD,
DSI_WRITE_BUFFER->DSI_VALIDATE_BUFFER,
DSI_WRITE_BUFFER->IDLE,
IDLE->CLEAR_DSI_COMMAND_QUEUE,
IDLE->DECODE,
WRITE_REGISTER_0->DSI_INVALIDATE_BUFFERS,
WRITE_REGISTER_0->IDLE,
WRITE_REGISTER_0->WRITE_REGISTER_1,
WRITE_REGISTER_1->IDLE
MODULE=dsi3_transmit
CURRENT=state
NEXT=state_nxt
STATES=INVERT,SET_RECEIVE_MODE,SET_TRANSMIT_MODE,SHIFT,TRANSMIT_IDLE,TRANSMIT_RESET,WAIT_END,WAIT_HALF_A_BIT
TRANSITIONS=INVERT->SHIFT,
INVERT->TRANSMIT_IDLE,
INVERT->TRANSMIT_RESET,
INVERT->WAIT_END,
INVERT->WAIT_HALF_A_BIT,
SET_RECEIVE_MODE->TRANSMIT_IDLE,
SET_RECEIVE_MODE->TRANSMIT_RESET,
SET_TRANSMIT_MODE->SHIFT,
SET_TRANSMIT_MODE->TRANSMIT_IDLE,
SET_TRANSMIT_MODE->TRANSMIT_RESET,
SHIFT->INVERT,
SHIFT->TRANSMIT_IDLE,
SHIFT->TRANSMIT_RESET,
TRANSMIT_IDLE->SET_TRANSMIT_MODE,
TRANSMIT_IDLE->TRANSMIT_RESET,
TRANSMIT_RESET->TRANSMIT_IDLE,
WAIT_END->TRANSMIT_IDLE,
WAIT_END->TRANSMIT_RESET,
WAIT_END->WAIT_HALF_A_BIT,
WAIT_HALF_A_BIT->SET_RECEIVE_MODE,
WAIT_HALF_A_BIT->TRANSMIT_IDLE,
WAIT_HALF_A_BIT->TRANSMIT_RESET
MODULE=timebase
CURRENT=state
NEXT=state_nxt
STATES=CLKREF_VALID,NO_CLKREF,PLL_HOLD,PLL_LOCKED
TRANSITIONS=CLKREF_VALID->NO_CLKREF,
CLKREF_VALID->PLL_LOCKED,
NO_CLKREF->CLKREF_VALID,
PLL_HOLD->CLKREF_VALID,
PLL_HOLD->NO_CLKREF,
PLL_LOCKED->CLKREF_VALID,
PLL_LOCKED->NO_CLKREF,
PLL_LOCKED->PLL_HOLD
MODULE=dsi3_iload_control
CURRENT=state
NEXT=state_next
STATES=IDAC_SA,IDLE,INITIALIZE
TRANSITIONS=IDAC_SA->IDLE,
IDLE->INITIALIZE,
INITIALIZE->IDAC_SA,
INITIALIZE->IDLE
