## macros
#macro(hex $value)
#set($intValue = $tools.parseInteger($value))
$tools.format("%x", $intValue)#end

`ifndef _TEST_REGISTER_STRUCTS
`define _TEST_REGISTER_STRUCTS

###foreach($instance in $instances)
##	#set($instanceName = $instance.name.replaceAll("\W", "_"))
##	#set($block = $project.getById($instance.linkedBlockId))
#set($regs = $project.getAllByType("REGISTER"))
#foreach ($reg in $regs)
	#if(!$reg.name.contains("["))
		#if($reg.isTestInstruction())
	typedef struct packed unsigned {
	#set ($unused = 1)
	#set ($max = $reg.bitGroups.size() - 1 )
	#foreach ($bitfield_index in [$max .. 0])
		#if($reg.bitGroups[$bitfield_index].name == "-")
		logic#if($reg.bitGroups[$bitfield_index].bitWidth > 1)#set($msb = $reg.bitGroups[$bitfield_index].bitWidth - 1)[$msb:0]#end unused_$unused;
		#set($unused = $unused + 1)
		#else
		logic#if($reg.bitGroups[$bitfield_index].bitWidth > 1)#set($msb = $reg.bitGroups[$bitfield_index].bitWidth - 1)[$msb:0]#end $reg.bitGroups[$bitfield_index].name;
		#end
	#end
	} ${reg.name}_t;
	
		#end
	#end
#end

`endif
