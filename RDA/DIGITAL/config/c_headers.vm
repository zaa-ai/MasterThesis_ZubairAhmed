#set($category=$args.get("category"))
#ifndef __$args.get("project")_BF_H__
\#define __$args.get("project")_BF_H__

#set($allRegisters = [])
#set($funcInstances = $edfTool.getInstances($category))
#foreach($instance in $funcInstances)
#set($register_variable_type = "short")

// Instance base addresses

#ifndef BASE_ADDR_$instance.name 
\#define BASE_ADDR_$instance.name ${instance.baseAddress.replaceAll("_","")}U
\#define SIZE_$instance.name $tools.format("0x%04x",${instance.length})U
#endif

// Register bit field definitions
	 
    #set($regs = $edfTool.getRegisters($instance))
    #foreach ($reg in $regs)
        #set($register = $edfTool.toStoveRegister($reg, $instance))
        #if($register.bits > 16)#set($register_variable_type = "long")#else#set($register_variable_type = "short")#end
/* ${instance.name}_${register.name} */

		#foreach($bitfield in $register.getAllUsedFields())
		#if(!$bitfield.isUnused())
#set($bitfield_long_name= "${instance.name.toUpperCase()}_${register.name.toUpperCase()}_${bitfield.Name.toUpperCase()}")
#if($bitfield.bits==1)\#define $tools.format("%-60s", "BIT_$bitfield_long_name") (0)#end
\#define $tools.format("%-60s", "MSK_$bitfield_long_name") ($tools.format("0x%x", $math.sub($math.pow(2,$bitfield.bits),1)))
\#define $tools.format("%-60s", "SFT_$bitfield_long_name") (0)
\#define $tools.format("%-60s", "LSB_$bitfield_long_name") ($bitfield.lsb)
#set($msb = $bitfield.lsb + $bitfield.bits - 1)
\#define $tools.format("%-60s", "MSB_$bitfield_long_name") ($msb)

			#end
		#end
typedef struct {
#foreach($bitfield in $register.Fields)
  unsigned $register_variable_type #if($bitfield.isUnused())reserved#else${bitfield.Name.toLowerCase()}#end : $bitfield.bits;
#end
} ${instance.name.toLowerCase()}_${register.name.toLowerCase()}_bf;
		
typedef union {
  unsigned $register_variable_type val;
  ${instance.name.toLowerCase()}_${register.name.toLowerCase()}_bf bf;
} ${instance.name.toLowerCase()}_${register.name.toLowerCase()}_t;


		#set($bla = $allRegisters.add($register))
    #end

#if($regs.size()>0)
typedef struct {
	#foreach ($reg in $regs)
		#set($register = $edfTool.toStoveRegister($reg, $instance))
  $tools.format("%-66s", "${instance.name.toLowerCase()}_${register.name.toLowerCase()}_t") ${register.name.toLowerCase()};
	#end
} ${instance.name.toLowerCase()}_t;

typedef union {
  unsigned $register_variable_type a[sizeof(${instance.name.toLowerCase()}_t)/sizeof(unsigned $register_variable_type)];
  ${instance.name.toLowerCase()}_t s;
} ${instance.name.toLowerCase()}_u_t;
#end


#foreach ($reg in $regs)
		#set($register = $edfTool.toStoveRegister($reg, $instance))
		#set($vbmask=0)
		#set($romask=0)
		#foreach($bitfield in $register.Fields)
			#set($msb = $bitfield.lsb + $bitfield.bits)
			#if($bitfield.isUnused())
				#set($romask=$romask+($math.pow(2, $msb)-$math.pow(2,$bitfield.lsb)))
			#else
				#set($vbmask=$vbmask+$math.pow(2, $msb)-$math.pow(2,$bitfield.lsb))
				#if($bitfield.access == "ro")
					#set($romask=$romask+($math.pow(2, $msb)-$math.pow(2,$bitfield.lsb)))
				#else
				#end
			#end
		#end
#if($register.bits > 16)#set($register_output_format = "0x%08x")#else#set($register_output_format = "0x%04x")#end
#set($register_name="${instance.name.toUpperCase()}_${register.name.toUpperCase()}")
\#define $tools.format("%-60s", "ADDR_$register_name") ($tools.format("0x%X", ${register.address})U)
\#define $tools.format("%-60s", "A_$register_name(ba)") ((ba) + ADDR_$register_name)
\#define $tools.format("%-60s", "R_$register_name(ba)") (*(volatile unsigned $register_variable_type *)((unsigned int)A_$register_name(ba)))
\#define $tools.format("%-60s", "RES_$register_name") ($tools.format("$register_output_format", $register.getReset())U)
\#define $tools.format("%-60s", "MSB_$register_name") ($math.sub($register.bits, 1))
\#define $tools.format("%-60s", "LSB_$register_name") (0)
\#define $tools.format("%-60s", "VBMASK_$register_name") ($tools.format($register_output_format, ${vbmask})U)
\#define $tools.format("%-60s", "ROMASK_$register_name") ($tools.format($register_output_format, ${romask})U)
\#define $tools.format("%-60s", "AADDR_$register_name") (BASE_ADDR_${instance.name.toUpperCase()} + ADDR_$register_name)
\#define $tools.format("%-60s", "REG_$register_name") (*(volatile unsigned $register_variable_type *)((unsigned int)AADDR_$register_name))

#end
 

#end
#endif