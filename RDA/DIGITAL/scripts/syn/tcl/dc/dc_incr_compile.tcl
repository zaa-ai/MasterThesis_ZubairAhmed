if {$OPTIMIZATION_FLOW != "rtm_exp"} {
################################################################################
## RM+ Variable and Command Settings before incremental compile
################################################################################
if { $OPTIMIZATION_FLOW == "hplp" || $OPTIMIZATION_FLOW == "tim" } {
   if {[shell_is_dcnxt_shell]} {
     #The following variable, when set to true, runs additional optimizations to improve the timing of  the design at the cost of additional run time.
       set_app_var compile_enhanced_tns_optimization true
              } else {
    # Creating path groups to reduce TNS
   if { [llength [all_scenarios]] > 0 } {
    set prd_save_curr_scen [current_scenario]
    foreach prd_scen [all_scenarios] { 
    current_scenario $prd_scen   
    create_auto_path_groups -mode mapped
  }
    current_scenario $prd_save_curr_scen
 } else {
   create_auto_path_groups -mode mapped
 }
     }
}
if { (${OPTIMIZATION_FLOW} == "hc") || (${OPTIMIZATION_FLOW} == "hplp") } {
    if {[shell_is_in_topographical_mode]} {

	# Enable congestion-driven  placement  in incremental compile to improve congestion    
	# while preserving quality of results
	set_app_var spg_congestion_placement_in_incremental_compile true
    }
}

if {[file exists [which ${LIBRARY_DONT_USE_PRE_INCR_COMPILE_LIST}]]} {
  puts "RM-Info: Sourcing script file [which ${LIBRARY_DONT_USE_PRE_INCR_COMPILE_LIST}]\n"
  source -echo -verbose $LIBRARY_DONT_USE_PRE_INCR_COMPILE_LIST
}

if {[shell_is_dcnxt_shell]} {
  # Use the set_technology and set_hpc_options command either before compile_ultra 
  # or before compile_ultra -incremental commands to set the core and stage 
  # specific settings for high performance cores. 
  # Refer to the "Applying Required Settings for High Performance Cores "
  # section in the Design Compiler User Guide for details.
  # Note: This is a Design Compiler NXT feature and is not supported in 
  # other flavors of the tool.
  # set_hpc_options -core <core> -stage compile_inc
  # Any individual settings applied after the set_hpc_options will 
  # override the recommended settings.
}

#########################################################################
# Incremental compile is required if netlist and/or constraints are 
# changed after first compile
# Example: DFT insertion, Placement aware multibit banking etc.       
# Incremental compile is also recommended for final QoR signoff as well
#########################################################################   

# ELMOS: added option no_autoungroup
compile_ultra -incremental -scan -spg -no_autoungroup

################################################################################
# Remove the path groups generated by create_path_groups command. 
# This does not remove user created path groups
################################################################################
if { $OPTIMIZATION_FLOW == "hplp" || $OPTIMIZATION_FLOW == "tim" } {
   if { [llength [all_scenarios]] > 0 } {
    set prd_save_curr_scen [current_scenario]
    foreach prd_scen [all_scenarios] { 
    current_scenario $prd_scen   
    remove_auto_path_groups
  }
  current_scenario $prd_save_curr_scen
  } else {
    remove_auto_path_groups
  }
}
#################################################################################
# High-effort area optimization
#
# optimize_netlist -area command, was introduced in I-2013.12 release to improve
# area of gate-level netlists. The command performs monotonic gate-to-gate 
# optimization on mapped designs, thus improving area without degrading timing or
# leakage. 
#################################################################################

optimize_netlist -area
}
