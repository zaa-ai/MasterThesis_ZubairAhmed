#parse( "tmr_definitions.vm" )
 #generate_info("Standard test module for ${registerFile.name} in ${registerFile.blockName}")
module test_${test_name} #(
		parameter BASE_ADDR,
		parameter ADDR_WIDTH = 8
	)(
		jtag_bus_if.slave		jtag_bus,
		
		tmr_${test_name}_if.master  tmr_${test_name},
#if ($test_name != "top")
  #if ($tmr_out.has_tmr)		tmr_out_${test_name}_signals_if.slave tmr_out_${test_name}_signals,
  #end
  #if ($tmr_in.has_tmr)$log.info("has_tmr:tmr_in:$tmr_in")
  		// TMR_IN
	#foreach ($tmr_in_signal in $tmr_in.contents.entrySet())		input	logic#if($tmr_in_signal.value.isArray)[$tmr_in_signal.value.msb:0]#end	i_${tmr_in_signal.key}_tmr_in,  // signal from application
		output	logic#if($tmr_in_signal.value.isArray)[$tmr_in_signal.value.msb:0]#end	o_${tmr_in_signal.key}_tmr_in,  // signal muxed with tmr_in
    #end
  #end
#end

		// TMR_SEL/_VAL
  #if($tmrSelVal.hasTmr)
    #foreach($tmrSelValSignal in $tmrSelVal.contents.entrySet())		input	logic#if($tmrSelValSignal.value.valIsArray) [${tmrSelValSignal.value.valMsb}:0]#end	i_${tmrSelValSignal.key}_tmr_val, // signal from application for sel_val
		output	logic#if($tmrSelValSignal.value.valIsArray) [${tmrSelValSignal.value.valMsb}:0]#end	o_${tmrSelValSignal.key}_tmr_val, // signal muxed with tmr_val
	#end
  #end
  
#if ($test_name != "top")

		// TMR_DIG
  #if($has_tmr_dig)
    #foreach ($signal in $tmr_dig_signals.entrySet())		output  logic o_tmr_dig_${signal.key},
    #end
  #end
#end

		output	logic[15:0]		o_jtag_dr
	);
	
	clk_reset_if clk_rst ();
	assign	clk_rst.clk = jtag_bus.clk;
	assign	clk_rst.rstn = jtag_bus.rstn;
	
	//==========================================================================
	// registers
	//==========================================================================
	`include "${registerFile.name}_if_inst.sv"
	${registerFile.name} #(
		.base_addr                   (BASE_ADDR                  ), 
		.addr_width                  (ADDR_WIDTH                 )
	) i_${registerFile.name} (
		.clk_rst                     (clk_rst.slave              ), 
		.addr                        (jtag_bus.addr              ), 
		.data_in                     (jtag_bus.data_write        ), 
		.wr                          (jtag_bus.wr                ), 
		.rd                          (jtag_bus.rd                ),
		#foreach($register in $registerFile.registers)
		#if(($test_name != "top") || (($test_name == "top") && $register.name.startsWith("TMR")))
		.${registerFile.name}_$register.name (${registerFile.name}_${register.name}.master),
		#end
		#end
		.data_out                    (o_jtag_dr                  ) 
	);
	
#if ($has_tmr_ana)	//==========================================================================
	// TMR_ANA section
	//==========================================================================
#if($tmr_ana_combined == true)
    #foreach ($signal in $tmr_ana_signals)	assign tmr_${test_name}.${signal.field} = ${registerFile.name}_${signal.field.toUpperCase()}.value[${signal.msb}:0];
    #end
	#else
	#foreach ($signal in $tmr_ana_signals)	assign tmr_${test_name}.${signal.field} = ${registerFile.name}_${signal.field.toUpperCase()}.${signal.field};
	#end
#end
	
#end
#if ($has_tmr_dig)	//==========================================================================
	// TMR_DIG section
	//==========================================================================
  #if ($test_name == "top")
    #foreach ($signal in $tmr_dig_signals.entrySet())	assign tmr_${test_name}.tmr_dig_${signal.key.toLowerCase()} =${registerFile.name}_${signal.value.name}.${signal.key};
    #end
  #else
    #foreach ($signal in $tmr_dig_signals.entrySet())	assign o_tmr_dig_${signal.key} =${registerFile.name}_${signal.value.name}.${signal.key};
    #end
  #end  
    
#end
#if ($tmr_out.has_tmr)	//==========================================================================
	// TMR_OUT section
	//==========================================================================
  #if ($test_name == "top")
    #foreach($tmrOutSet in ${tmr_out.contents.entrySet()})
    #set ($interfaceSignal = ${tmrOutSet.key.toLowerCase()})
	assign tmr_${test_name}.tmr_out_$interfaceSignal = ${registerFile.name}_${tmrOutSet.value.register.name}.${tmrOutSet.key};
    #end
  #else
	#set ($index = 0)
	#foreach ( $vector in [0..${tmr_out.vectors_msb}] ) 	assign tmr_${test_name}.tmr_out[${index}] = tmr_out_${test_name}_signals.vector[tmr_out_tmr_out_${vector}];
	  #set ($index = ($index + 1))
	#end
  #end
  
#end
#if ($tmr_in.has_tmr)	//==========================================================================
	// TMR_IN section
	//==========================================================================
  #if ($test_name == "top")
    #foreach( $field in $tmr_in.contents.entrySet())	assign tmr_${test_name}.tmr_in[${field.key}] = ${registerFile.name}_${field.value.register.name}.tmr_in_${field.key};
    #end
  #else
    #foreach ($tmrInSignal in $tmr_in.contents.entrySet())#*
    *#$log.info("tmr_in_signal = ${tmrInSignal.value}; key=$tmrInSignal.key")	always_comb begin
    	if (TEST_DSI_TMR_IN_DSI3.tmr_in_tx == '0) begin
			o_${tmrInSignal.key}_tmr_in = i_${tmrInSignal.key}_tmr_in;
		end
		else begin#set ($tmrInVectorSize=${tmr_in.vectorMSB}+2)
			if (TEST_DSI_TMR_IN_DSI3.tmr_in_$tmrInSignal.key < ${tmrInSignal.value.bitWidth}'d${tmrInVectorSize}) begin
				o_${tmrInSignal.key}_tmr_in = tmr_dsi.tmr_in[${registerFile.name}_${tmrInSignal.value.register.name}.tmr_in_$tmrInSignal.key-1];
			end
			else begin
				o_${tmrInSignal.key}_tmr_in = i_${tmrInSignal.key}_tmr_in;
			end
		end
    end
    #end
  #end
  
#end
#if ($tmrSelVal.hasTmr)	//==========================================================================
	// TMR_SEL/_VAL section
	//==========================================================================
  #if ($test_name == "top")
  #else
	#foreach ($tmrSelValSignal in $tmrSelVal.contents.entrySet())	always_comb begin
		if (${registerFile.name}_${tmrSelValSignal.value.registerSel.name}.${tmrSelValSignal.key} == 1'b1)
			o_${tmrSelValSignal.key}_tmr_val = ${registerFile.name}_${tmrSelValSignal.value.registerVal.name}.${tmrSelValSignal.key};
		else
			o_${tmrSelValSignal.key}_tmr_val = i_${tmrSelValSignal.key}_tmr_val;
	end
    #end
  #end
#else $log.info("${registerFile.name} has no TMR_SEL/_VAL")
#end

endmodule
