////////////////////////////////////////////////////////////////
// Netlist generated by	: Custom Designer (TM) db::generateVerilog
// Date			: Fri Jul 21 14:04:14 CEST 2017
////////////////////////////////////////////////////////////////
// Library Name	:	 17402_PLL
// Cell Name	:	 PLL_TOP
// View Name	:	 systemverilog
////////////////////////////////////////////////////////////////
`timescale 1ps/1ps
module pll_top (
//		inout	AOUT,
		// @SuppressProblem -type fully_unread_net -count 1 -length 1
		input	logic [6:0] ATST_PLL,
		input 	logic		CLKREF,
		input 	logic		RESB,
		
		input	logic		ON_PLL,
		input	logic		PLL_HOLD,
		output	logic		PLL_LOCK_MON,
		output	logic		PLL_UP_MON,
		output	logic		CLKPLL,
		output	logic		CLKPLL_DIV,
		output	logic		PLL_DOWN_MON,
		
		input 	real		VDD,
		input	real		GND
	);
      
    parameter time	init_period = 80ns;
	parameter int	clk_div     = 36;
    
	time	current_period = init_period;
	time 	clkref_period;
	time	clkref_time[1:0];
	time	clkpll_div_period;
	time 	phase_diff;	
	
	assign	clkref_period = (clkref_time[0] - clkref_time[1]);
	assign	clkpll_div_period = current_period * time'(clk_div) * time'(2);
	
	bit		period_adapted = 1'b0;
	
	//------------------------------
	// Reference clock detection:
	//------------------------------
    
	always@(posedge CLKREF) begin
		clkref_time = {clkref_time[0], $time()};
	end
    
	logic	pll_en_int;
	logic	vdd_ok;
	always@(*) begin
		if ((VDD-GND) > 1.5)
			vdd_ok = 1'b1;
		else
			vdd_ok = 1'b0;
	end
	
	assign pll_en_int = ON_PLL & RESB &  vdd_ok;
      
	//------------------------------
	// CLKPLL generation
	//------------------------------
	always begin
		if (pll_en_int) begin
			#(current_period);
			CLKPLL = ~CLKPLL;
		end
		else begin
			CLKPLL = 1'b0;
			current_period = init_period;
			period_adapted = 1'b0;
			@(pll_en_int);
		end
	end
    
	always@(posedge CLKPLL_DIV) begin
		if (PLL_HOLD == 1'b0) begin
			if (period_adapted) begin
				adapt_phase();
			end
			else begin
				adapt_frequency();
			end
		end
	end
	
	//------------------------------
	// CLKPLL_DIV generation
	//------------------------------
	int cnt = 0;
	initial begin
		CLKPLL_DIV = 1'b0;
	end
	
	always@(posedge CLKPLL) begin
		if (pll_en_int) begin
			if (cnt == 35) cnt <= 0;
			else cnt <= cnt+1; 
		end
		else begin
			cnt = 0;
		end
	end
    
	always@(posedge CLKPLL) begin
		if (pll_en_int) begin
			if (cnt > 31) begin
				CLKPLL_DIV = 1'b0;
			end
			else begin
				CLKPLL_DIV = 1'b1;
			end
		end
		else begin
			CLKPLL_DIV = 1'b0;
		end
	end
    
	//------------------------------
	// Lock monitor
	//------------------------------
	reg lock_mon_int = 1'b0;
	always begin
		lock_mon_int = 1'b0;
		#(1ns);
		if (pll_en_int) begin
			#(150us);
			lock_mon_int = 1'b1;
		end
		@(pll_en_int);
	end
    
	//------------------------------
	// Monitoring
	//------------------------------
	always begin
		PLL_DOWN_MON = 1'b0;
		PLL_UP_MON   = 1'b0;
		PLL_LOCK_MON = 1'b0;
		#(1ns);
		if (CLKREF) begin
			#(1ns);
			PLL_UP_MON   = 1'b1;
			PLL_LOCK_MON = 1'b0;
			#(4ns);
			PLL_DOWN_MON = 1'b1;
			#(1ns);
			PLL_UP_MON   = 1'b0;
			PLL_DOWN_MON = 1'b0;
			PLL_LOCK_MON = lock_mon_int;
		end
		@(CLKREF);
		@(CLKREF);
	end
	
	function void adapt_frequency();
		time time_deviation;
		time lower_limit;
		time upper_limit;
		time_deviation = 1ns*clk_div;
		upper_limit = (clkref_period + time_deviation);
		lower_limit = (clkref_period - time_deviation);
		
		if ((clkpll_div_period < upper_limit) && (clkpll_div_period > lower_limit)) begin
			period_adapted = 1'b1;
		end
		else begin
			if (clkpll_div_period > clkref_period) begin
				current_period -= 1ns;
			end
			else begin
				current_period += 1ns;
			end
		end
	endfunction
	
	function void adapt_phase(); 
		phase_diff = $time() - clkref_time[0];
		if (clkref_period/time'(2) < phase_diff) begin
			if (clkref_period > phase_diff) begin
				phase_diff = clkref_period - phase_diff;
				current_period = (clkref_period + phase_diff/time'(2))/time'(72);
			end
			else begin
				phase_diff = phase_diff - clkref_period;
				set_period();
			end
		end
		else begin
			set_period();
		end
	endfunction
	
	function void set_period();
		if ((clkref_period - phase_diff/time'(2))/time'(72) < 100ns) begin
			current_period = (clkref_period - phase_diff/time'(2))/time'(72);
		end
	endfunction
    
endmodule
