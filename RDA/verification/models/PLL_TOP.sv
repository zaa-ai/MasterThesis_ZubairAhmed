////////////////////////////////////////////////////////////////
// Netlist generated by	: Custom Designer (TM) db::generateVerilog
// Date			: Fri Jul 21 14:04:14 CEST 2017
////////////////////////////////////////////////////////////////
// Library Name	:	 17402_PLL
// Cell Name	:	 PLL_TOP
// View Name	:	 systemverilog
////////////////////////////////////////////////////////////////
`timescale 1s/1fs
module PLL_TOP_MOD (
		input	logic		AOUT,
		input	logic [6:0]	ATST_PLL,
		input 	logic		CLKREF,
		input 	logic		RESB,
		
		input	logic		ON_PLL,
		input	logic		PLL_HOLD,
		output	logic		PLL_LOCK_MON,
		output	logic		PLL_UP_MON,
		output	logic		CLKPLL,
		output	logic		CLKPLL_DIV,
		output	logic		PLL_DOWN_MON,
		
		input 	logic		PLL_IC5U,
		
		input 	logic		SUB,
		input 	logic		VCC,
		input 	logic		VDD,
		input	logic		GND
	);
      
    parameter real	init_period = 80e-9;
	parameter int	clk_div     = 36;
    
	real	current_period = init_period;
	real 	clkref_period;
	real	clkref_time_1;
	real	clkref_time_0;
	real	clkpll_div_period;
	real 	period_diff;
	real 	phase_diff;
	
	assign	clkref_period = (clkref_time_0 - clkref_time_1);
	assign	clkpll_div_period = current_period * clk_div * 2;
	
	bit		period_adapted = 0;
	bit		phase_adapted = 0;
	bit		positive_phase;
    
	logic	pll_en_int;
	assign pll_en_int = ON_PLL;
	
	//------------------------------
	// Reference clock detection:
	//------------------------------
       
	always@(posedge CLKREF) begin
		clkref_time_1 = clkref_time_0;
		clkref_time_0 = $realtime;
	end
        
	//------------------------------
	// CLKPLL generation
	//------------------------------
	
	always begin
		if (pll_en_int) begin
			#(current_period);
			CLKPLL = ~CLKPLL;
		end
		else begin
			CLKPLL = 0;
			current_period = init_period;
			period_adapted = 0;
			@(pll_en_int);
		end
	end
	
	always@(posedge CLKPLL_DIV) begin
		if (PLL_HOLD == 1'b0) begin
			if (period_adapted) begin
				adapt_phase();
			end
			else begin
				adapt_frequency();
			end
		end
	end
	
	//------------------------------
	// CLKPLL_DIV generation
	//------------------------------
	
	int cnt = 0;
	
	initial CLKPLL_DIV = 1'b0;
	
	always@(posedge CLKPLL) begin
		if (pll_en_int) begin
			if (cnt > 31) begin
				CLKPLL_DIV = 1'b0;
			end
			else begin
				CLKPLL_DIV = 1'b1;
			end
			if (cnt == 35) begin
				cnt <= 0;
			end
			else begin
				cnt <= cnt+1;
			end
		end
		else begin
			CLKPLL_DIV = 0;
			cnt = 0;
		end
	end
	
	//------------------------------
	// Lock monitor
	//------------------------------
	
	reg lock_mon_int = 0;
	always begin
		lock_mon_int = 0;
		#(1ns);
		if (pll_en_int) begin
			#(150us);
			lock_mon_int = 1;
		end
		@(pll_en_int);
	end
	
	//------------------------------
	// Monitoring
	//------------------------------
	
	always begin
		PLL_DOWN_MON = 0;
		PLL_UP_MON   = 0;
		PLL_LOCK_MON = 0;
		#(1ns);
		if (CLKREF) begin
			#(1ns);
			PLL_UP_MON   = 1;
			PLL_LOCK_MON = 0;
			#(4ns);
			PLL_DOWN_MON = 1;
			#(1ns);
			PLL_UP_MON   = 0;
			PLL_DOWN_MON = 0;
			PLL_LOCK_MON = lock_mon_int;
		end
		@(CLKREF);
		@(CLKREF);
	end
	
	//------------------------------
	// Frequency Regulator
	//------------------------------
	
	function adapt_frequency();
		real time_deviation;
		real lower_limit;
		real upper_limit;
		time_deviation = 1ns*clk_div;
		upper_limit = (clkref_period + time_deviation);
		lower_limit = (clkref_period - time_deviation);
		
		if ((clkpll_div_period < upper_limit) && (clkpll_div_period > lower_limit)) begin
			period_adapted = 1;
    			$display ("PLL model: Frequency locked");
		end
		else begin
			if (clkpll_div_period > clkref_period) begin
			        if (current_period > 1e-9) begin
					current_period -= 1e-9;
				end
			end
			else begin
				current_period += 1e-9;
			end
		end
	endfunction
	
	//------------------------------
	// Phase Regulator
	//------------------------------		
				
	function adapt_phase(); 
		phase_diff = $realtime - clkref_time_0;
		if (clkref_period/2 < phase_diff) begin
			positive_phase = 1;
			if (clkref_period > phase_diff) begin
				phase_diff = clkref_period - phase_diff;
				current_period = (clkref_period + phase_diff/4)/72;
			end
			else begin
				phase_diff = phase_diff - clkref_period;
				set_period();
			end
		end
		else begin
			set_period();
		end
		
		//if ((phase_diff < 1e-9*clk_div) && (phase_diff > -1e-9*clk_div)) begin
    		//	$display ("PLL: Phase locked");
		//end
		
	endfunction
	
	function set_period();
		positive_phase = 0;
		if ((clkref_period - phase_diff/4)/72 > 1e-9) begin
			current_period = (clkref_period - phase_diff/4)/72;
		end		
	endfunction
        
endmodule
