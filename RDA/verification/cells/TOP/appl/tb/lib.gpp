
**------------------------------------------------
** Local Includes
**------------------------------------------------

`var(name=intb_checker_trigger type=reg)

**----------

`include "$SPSCR_TB/tb/lib_spi.gpp"
`include "$SPSCR_TB/tb/lib_dsi.gpp"
`include "$SPSCR_TB/tb/lib_jtag.gpp"
`include "$SPSCR_TB/tb/op.gpp"
`include "$SPSCR_TB/tb/sx.gpp"

**------------------------------------------------
** Frequency Meters
**------------------------------------------------

`if models[0]
  `dfreq_meter(name=clkosc     s=snps_sptop.xdut.xdigi.I_CLKOSC)
  `dfreq_meter(name=clkpll     s=snps_sptop.xdut.xdigi.I_CLKPLL)
  `dfreq_meter(name=clkpll_div s=snps_sptop.xdut.xdigi.I_CLKPLL_DIV)
  `dfreq_meter(name=clkref     s=snps_sptop.xdut.xdigi.I_CLKREF)
`else
  `dfreq_meter(name=clkosc     s=vvsup_val)
  `dfreq_meter(name=clkpll     s=vvsup_val)
  `dfreq_meter(name=clkpll_div s=vvsup_val)
  `dfreq_meter(name=clkref     s=vvsup_val)
`endif

**------------------------------------------------
** Power Consumption Checker
**------------------------------------------------

define pv_check(__tag__ __add__=0 __min__=0 __typ__= __max__=360`m)
  
  `meas_v( name  = V__SUP___tag____
           p     = vsup_pcb
	   print = 0)
  
  `meas_i( name  = I__SUP___tag____
           p     = xdut.vsup_p
	   print = 0)
  
  `calc( name  = P__IC___tag____
         expr  = V__SUP___tag____ * I__SUP___tag____ + __add__
	 unit  = W
	 min   = __min__
	 typ   = __typ__
	 max   = __max__
	 x     = var_vvsup
	 xunit = V)
	 
enddefine

**------------------------------------------------
** INTB Checker
**------------------------------------------------

`always(name=INTB Check)
  
  `cross_d(name=cross_intb_checker s=xtbctrl.intb_checker_trigger dir=1 t=1`k)
  
  `if "$SPSCR_MACROTYPE" eq "SV"
    if (spi_read_irq_status > 0) begin
  `endif
  
    `meas_v( name = V__INTB_L__
             p    = intb_pcb
	     min  = -0.1
	     typ  = 0.0
	     max  = 0.1)

  `if "$SPSCR_MACROTYPE" eq "SV"
    end
    else begin
  `endif
  
    `meas_v( name = V__INTB_H__
             p    = vio_pcb
             n    = intb_pcb
	     min  = -0.1
	     typ  = 0.0
	     max  = 0.1)
  
  `if "$SPSCR_MACROTYPE" eq "SV"
    end
  `endif
    
  `set_var(name=intb_checker_trigger val=0)
  
`endalways

**------------------------------------------------
** IC State Monitor
**------------------------------------------------

define irq_read(__exp__=0      __mask__='hefff
                __dsi1_exp__=0 __dsi1_mask__='h007f
                __dsi0_exp__=0 __dsi0_mask__='h007f
                __buf_exp__=0  __buf_mask__='h01ff
                __spi_exp__=0  __spi_mask__='h000f
                __sup_exp__=0  __sup_mask__='h001f
	        __use_model__=1)
  
  `spi_read_register(name=IRQ_STAT block=INTERRUPT data=__exp__ mask=__mask__ use_model=__use_model__)
  `set_var(name=spi_read_irq_status_trigger val=1)
  
  `spi_read_register(name=SUP_IRQ_STAT block=SUPPLY      data=__sup_exp__  mask=__sup_mask__  use_model=__use_model__)
  `spi_read_register(name=DSI_IRQ_STAT block=DSI_1       data=__dsi1_exp__ mask=__dsi1_mask__ use_model=__use_model__)
  `spi_read_register(name=DSI_IRQ_STAT block=DSI_0       data=__dsi0_exp__ mask=__dsi0_mask__ use_model=__use_model__)
  `spi_read_register(name=BUF_IRQ_STAT block=BUFFER_IRQS data=__buf_exp__  mask=__buf_mask__  use_model=__use_model__)
  `spi_read_register(name=SPI_IRQ_STAT block=SPI         data=__spi_exp__  mask=__spi_mask__  use_model=__use_model__)

enddefine

*----------

define irq_clear(__use_model__=1)
  
  `spi_write_register(name=SUP_IRQ_MASK block=SUPPLY      data='h001f use_model=__use_model__)
  `spi_write_register(name=DSI_IRQ_MASK block=DSI_1       data='h007f use_model=__use_model__)
  `spi_write_register(name=DSI_IRQ_MASK block=DSI_0       data='h007f use_model=__use_model__)
  *spi_write_register(name=BUF_IRQ_EN   block=BUFFER_IRQS data='h007f use_model=__use_model__)
  `spi_write_register(name=SPI_IRQ_MASK block=SPI         data='h001f use_model=__use_model__)
  `spi_write_register(name=IRQ_MASK     block=INTERRUPT   data='h167f use_model=__use_model__)
  
  `spi_write_register(name=SUP_IRQ_STAT block=SUPPLY      data='h001f mask=0 use_model=__use_model__)
  `spi_write_register(name=DSI_IRQ_STAT block=DSI_1       data='h007f mask=0 use_model=__use_model__)
  `spi_write_register(name=DSI_IRQ_STAT block=DSI_0       data='h007f mask=0 use_model=__use_model__)
  `spi_write_register(name=BUF_IRQ_STAT block=BUFFER_IRQS data='h007f mask=0 use_model=__use_model__)
  `spi_write_register(name=SPI_IRQ_STAT block=SPI         data='h001f mask=0 use_model=__use_model__)
  `spi_write_register(name=IRQ_STAT     block=INTERRUPT   data='h167f mask=0 use_model=__use_model__)
  
  `set_var(name=spi_read_irq_status_trigger val=1)

enddefine

*----------

define ic_state_mon(__t__=1`m)

  `irq_clear()

  `wait(t=__t__)
  `set_var(name=op_active val=1)
  `wait(t=2`u)

enddefine

**------------------------------------------------
** Trim Variables
**------------------------------------------------

`read_trimfile(path=$SPSCR_PRJ/cells/TOP/test_trim/results/$IC_VER)
  
**------------------------------------------------
**------------------------------------------------
