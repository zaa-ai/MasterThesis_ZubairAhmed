
`if "$SPSCR_MACROTYPE" eq "SVDEF"

integer slave_communication_counter = 0;
real    slave_communication_counter_real = 0;

real slave_communication_iquiet     = 0;
real slave_communication_tchip      = 0;
real slave_communication_dibtrim    = 0;
real slave_communication_rec_offset = 0;
real slave_communication_slave_imax = 0;
real slave_communication_slave_cdsi = 0;
real slave_communication_slave_rdsi = 0;

integer slave_communication_reg = 0;

`endif
  
//------------------------------------------------
// Output Pattern File
//------------------------------------------------

`if "$SPSCR_MACROTYPE" eq "SVDEF"
integer SLAVE_ANSWER_TIMEFILE;
`endif

//----------

define slave_communication_pattern_fileopen(__type__=);

  SLAVE_ANSWER_TIMEFILE = $fopen("slave_timing.sv","__type__");

enddefine

//----------

`if "$SPSCR_MACROTYPE" eq "SV"

initial begin

  `slave_communication_pattern_fileopen(type=w)
  $fclose(SLAVE_ANSWER_TIMEFILE);

end

`endif

//----------

define slave_answer_symbol_begin(__ch__=)

`if "$SPSCR_MACROTYPE" eq "SV"

  slave_answer_en = 1;
  `slave_communication_pattern_fileopen(type=a)
  
  $fwrite(SLAVE_ANSWER_TIMEFILE, "\n");
  
  slave_communication_counter_real = slave_communication_counter + 1`m;
  
  $fwrite(SLAVE_ANSWER_TIMEFILE, "slave_timing[%.0f][%.0f].info_corner          = %.0f;\n",  slave_kramp, slave_communication_counter_real, PARAM_CORNER);
  $fwrite(SLAVE_ANSWER_TIMEFILE, "slave_timing[%.0f][%.0f].info_temp__j__       = %.0f;\n",  slave_kramp, slave_communication_counter_real, temp_j);
  $fwrite(SLAVE_ANSWER_TIMEFILE, "slave_timing[%.0f][%.0f].info_i__quite_rec__  = %.9f;\n",  slave_kramp, slave_communication_counter_real, slave_communication_iquiet);
  $fwrite(SLAVE_ANSWER_TIMEFILE, "slave_timing[%.0f][%.0f].info_dtr__ib__       = %.0f;\n",  slave_kramp, slave_communication_counter_real, slave_communication_dibtrim);
  $fwrite(SLAVE_ANSWER_TIMEFILE, "slave_timing[%.0f][%.0f].info_i__offset_rec__ = %.9f;\n",  slave_kramp, slave_communication_counter_real, slave_communication_rec_offset);
  $fwrite(SLAVE_ANSWER_TIMEFILE, "slave_timing[%.0f][%.0f].info_i__max_slave__  = %.9f;\n",  slave_kramp, slave_communication_counter_real, 2*iidsi);
  $fwrite(SLAVE_ANSWER_TIMEFILE, "slave_timing[%.0f][%.0f].info_c__dsi_bus__    = %.12f;\n", slave_kramp, slave_communication_counter_real, cbus);
  $fwrite(SLAVE_ANSWER_TIMEFILE, "slave_timing[%.0f][%.0f].info_r__dsi_bus__    = %.3f;\n",  slave_kramp, slave_communication_counter_real, rbus);
  $fwrite(SLAVE_ANSWER_TIMEFILE, "slave_timing[%.0f][%.0f].info_chiptime        = %.9f;\n",  slave_kramp, slave_communication_counter_real, slave_period);
  $fwrite(SLAVE_ANSWER_TIMEFILE, "\n");
  
  $fclose(SLAVE_ANSWER_TIMEFILE);

`endif
  
enddefine

//----------

define slave_answer_symbol_end(__ch__=)

  `if "$SPSCR_MACROTYPE" eq "SV"

    #(30e-6);

    `slave_communication_pattern_fileopen(type=a)
  
    slave_communication_counter_real = slave_communication_counter + 1`m;
  
    $fwrite(SLAVE_ANSWER_TIMEFILE, "slave_timing[%.0f][%.0f].t_rxd1[0][1] = %.0fns;\n", slave_kramp, slave_communication_counter_real, slave_answer_rxd1_t_01 * 1e9);
    $fwrite(SLAVE_ANSWER_TIMEFILE, "slave_timing[%.0f][%.0f].t_rxd1[1][0] = %.0fns;\n", slave_kramp, slave_communication_counter_real, slave_answer_rxd1_t_10 * 1e9);
    $fwrite(SLAVE_ANSWER_TIMEFILE, "slave_timing[%.0f][%.0f].t_rxd1[0][2] = %.0fns;\n", slave_kramp, slave_communication_counter_real, slave_answer_rxd1_t_02 * 1e9);
    $fwrite(SLAVE_ANSWER_TIMEFILE, "slave_timing[%.0f][%.0f].t_rxd1[2][0] = %.0fns;\n", slave_kramp, slave_communication_counter_real, slave_answer_rxd1_t_20 * 1e9);
    $fwrite(SLAVE_ANSWER_TIMEFILE, "slave_timing[%.0f][%.0f].t_rxd2[0][2] = %.0fns;\n", slave_kramp, slave_communication_counter_real, slave_answer_rxd2_t_02 * 1e9);
    $fwrite(SLAVE_ANSWER_TIMEFILE, "slave_timing[%.0f][%.0f].t_rxd2[2][0] = %.0fns;\n", slave_kramp, slave_communication_counter_real, slave_answer_rxd2_t_20 * 1e9);
    $fwrite(SLAVE_ANSWER_TIMEFILE, "slave_timing[%.0f][%.0f].t_rxd2[1][2] = %.0fns;\n", slave_kramp, slave_communication_counter_real, slave_answer_rxd2_t_12 * 1e9);
    $fwrite(SLAVE_ANSWER_TIMEFILE, "slave_timing[%.0f][%.0f].t_rxd2[2][1] = %.0fns;\n", slave_kramp, slave_communication_counter_real, slave_answer_rxd2_t_21 * 1e9);
  
    $fclose(SLAVE_ANSWER_TIMEFILE);
    slave_answer_en = 0;
  
    slave_communication_counter = slave_communication_counter + 1;

  `endif
  
enddefine



















//------------------------------------------------
// Save RXD to File
//------------------------------------------------

`if "$SPSCR_MACROTYPE" eq "SVDEF"

reg  slave_answer_en = 0;
real slave_answer_t1 = 0;
real slave_answer_t2 = 0;

`endif

//----------

define slave_answer_def(__rxd__=);

  real slave_answer_rxd__rxd___t_01 = 0;
  real slave_answer_rxd__rxd___t_02 = 0;
  real slave_answer_rxd__rxd___t_10 = 0;
  real slave_answer_rxd__rxd___t_12 = 0;
  real slave_answer_rxd__rxd___t_20 = 0;
  real slave_answer_rxd__rxd___t_21 = 0;

  real slave_answer_rxd__rxd___t_01_rel = 0;
  real slave_answer_rxd__rxd___t_02_rel = 0;
  real slave_answer_rxd__rxd___t_10_rel = 0;
  real slave_answer_rxd__rxd___t_12_rel = 0;
  real slave_answer_rxd__rxd___t_20_rel = 0;
  real slave_answer_rxd__rxd___t_21_rel = 0;

enddefine

`if "$SPSCR_MACROTYPE" eq "SVDEF"

`slave_answer_def(rxd=1)
`slave_answer_def(rxd=2)


/*
integer SLAVE_ANSWER_RXDFILE;
initial begin
  SLAVE_ANSWER_RXDFILE = $fopen("slave_answer.sv","w");
  SLAVE_ANSWER_RXDFILE = $fopen(".slave_answer.sv","w");
  $fclose(SLAVE_ANSWER_RXDFILE);    
end
*/

`endif

//----------

define slave_answer_calc_transition(__rxd__ __from__ __to__);

  if (slave_answer_chip_old == __from__ && slave_answer_chip == __to__) begin
    
    slave_answer_rxd__rxd___t___from____to__ = $realtime - slave_answer_t;
    *calc(name=dt__rx__rxd_____from____to____ expr=slave_answer_rxd__rxd___t___from____to__)
    
    if (slave_answer_chip_old > slave_answer_chip) begin
    
      slave_answer_rxd__rxd___t___from____to___rel = slave_answer_rxd__rxd___t___from____to__ - slave_answer_rxd__rxd___t___to____from__;
      *calc(name=dt__rx__rxd_____from____to___rel__ val=slave_answer_rxd__rxd___t___from____to___rel)
      
    end
    
  end

enddefine

define slave_answer_calc(__rxd__=);

  `slave_answer_calc_transition(rxd=__rxd__ from=0 to=1)
  `slave_answer_calc_transition(rxd=__rxd__ from=0 to=2)
  `slave_answer_calc_transition(rxd=__rxd__ from=1 to=0)
  `slave_answer_calc_transition(rxd=__rxd__ from=1 to=2)
  `slave_answer_calc_transition(rxd=__rxd__ from=2 to=0)
  `slave_answer_calc_transition(rxd=__rxd__ from=2 to=1)

enddefine

//----------

`if "$SPSCR_MACROTYPE" eq "SVDEF"

integer slave_answer_status = 0;

always begin

  slave_answer_status = 0;
  if (slave_answer_en > 0) @(slave_answer_en);
  slave_answer_status = 1;
  @(slave_answer_en);
  
  while (slave_answer_en > 0) begin
    
    slave_answer_status = 2;
    slave_answer_t1 = $realtime;
    slave_answer_rxd1_t_10_rel = 0;
    slave_answer_rxd1_t_20_rel = 0;
    slave_answer_rxd1_t_21_rel = 0;
    slave_answer_rxd2_t_10_rel = 0;
    slave_answer_rxd2_t_20_rel = 0;
    slave_answer_rxd2_t_21_rel = 0;
  
    fork: slave_answer_fork
    
      begin
        @(slave_answer_en);
	slave_answer_status = 3;
	disable slave_answer_fork;
      end
      
      begin
        `if models[0]
          @(snps_sptop.xdut.xdigi.I_DSI_RXD1[0]);
	`endif
	slave_answer_status = 4;
	`slave_answer_calc(rxd=1)
	disable slave_answer_fork;
      end
      
      begin
        `if models[0]
          @(snps_sptop.xdut.xdigi.I_DSI_RXD2[0]);
	`endif
	slave_answer_status = 5;
	`slave_answer_calc(rxd=2)
	disable slave_answer_fork;
      end
    
    join
    
    slave_answer_t2 = $realtime;

  end
  
  #(1e-9);
  
end

`endif























**------------------------------------------------
** Common
**------------------------------------------------

`var(name=master_period)
`var(name=slave_period)
`var(name=master_slave_gap)

**----------
  
define lib_dsi_ch(__ch__)
  
  `var(name=spi_dsi__ch___pending         type=reg)
  `var(name=crm_dsi__ch___pending         type=reg)
  `var(name=crm_dsi__ch___decoder_pending type=reg)
  `var(name=crm_dsi__ch___slave_pending   type=reg)
  `var(name=crm_data_dsi__ch__            type=reg [31:0])
  
  `var(name=dsi__ch___use_model type=reg)
  

enddefine

`lib_dsi_ch(ch=1)
`lib_dsi_ch(ch=0)

**----------

`include "$SPSCR_TB/tb/lib_dsi_decoder.gpp"

**------------------------------------------------
** SPI Conflict Solver
**------------------------------------------------

`var(name=spi_dsi_select type=reg [1:0])

**----------

`if "$SPSCR_MACROTYPE" eq "SV"

  always begin
    #(10`u);
    if (spi_dsi1_pending) begin $display("\tSPI DSI1 wait"); @(spi_dsi1_pending); end
    if (spi_dsi0_pending) begin $display("\tSPI DSI0 wait"); @(spi_dsi0_pending); end
    spi_dsi_select = spi_dsi_select + 1;
  end
  
`endif

**----------

define spi_packet_begin(__ch__=0)

  `if "$SPSCR_MACROTYPE" eq "SV"
    while (spi_dsi_select != __ch__) begin $display("\tSPI DSI__ch__ wait for free slot"); @(spi_dsi_select); end
    spi_dsi__ch___pending = 1;
  `endif

enddefine

**----------

define spi_packet_end(__ch__=0)

  `if "$SPSCR_MACROTYPE" eq "SV"
    spi_dsi__ch___pending = 0;
  `endif

enddefine
  
**------------------------------------------------
** CRM Communication
**------------------------------------------------

define crm_dsi(__ch__=0)

  `always(name=CRM DSI__ch__)
  
    `cross_d(name=cross_crm_dsi__ch___pending s=xtbctrl.crm_dsi__ch___pending dir=1 t=1`k)
  
    `spi_packet_begin(ch=__ch__)
      `spi_read_ic_status()
      `spi_transmit_crm(c=2**__ch__ data1=crm_data_dsi__ch__[31:16] data2=crm_data_dsi__ch__[15:0])
    `spi_packet_end(ch=__ch__)
  
    `set_var(name=crm_dsi__ch___slave_pending val=1)

  `endalways
  
  `always(name=CRM DSI__ch__ Slave Answer)
  
    `cross_d(name=cross_crm_dsi__ch___slave_pending s=xtbctrl.crm_dsi__ch___slave_pending dir=1 t=1`k)
    
    		`if simcase[62]
*   		  set_vdpi(name=vdpi_dsi__ch__ p=pdpi f=fdpi)
    		`endif
      
    `if models[0]
      `cross_d(name=cross_crm_dsi__ch____rx_txn s=xdut.xdigi.O_DSI_RX_TXN[__ch__] dir=1 t=3`m)
    `endif
    
    		`if simcase[62]
    		  `set_vdpi(name=vdpi_dsi__ch__ p=pdpi f=fdpi)
    		`endif
    
    `wait(t=master_slave_gap print=0)

    		`if simcase[62]
    		`else
    `calc( name = crm_dsi__ch___transmit_decoder_diff
           expr = crm_data_dsi__ch__ - crm_dsi__ch___transmit_decoder
	   min  = -0.5
	   typ  = 0
	   max  = 0.5)
	   
    `meas_v( name = V__DSI__ch___HIGH_CRM__
             p    = dsi__ch___pcb_mean
	     min  = `epm__V__DSI_HIGH___min
	     typ  = `epm__V__DSI_HIGH___typ
	     max  = `epm__V__DSI_HIGH___max)
    		`endif
  
    `comment(DSI__ch__ slave mirror CRM data)
    
    `slave_answer_symbol_begin()  
      `slave_answer_symbol(d=crm_data_dsi__ch__[31:28] src=idsi__ch___wv t=slave_period i=iidsi k=slave_kramp)
      `slave_answer_symbol(d=crm_data_dsi__ch__[27:24] src=idsi__ch___wv t=slave_period i=iidsi k=slave_kramp)
      `slave_answer_symbol(d=crm_data_dsi__ch__[23:20] src=idsi__ch___wv t=slave_period i=iidsi k=slave_kramp)
      `slave_answer_symbol(d=crm_data_dsi__ch__[19:16] src=idsi__ch___wv t=slave_period i=iidsi k=slave_kramp)
      `slave_answer_symbol(d=crm_data_dsi__ch__[15:12] src=idsi__ch___wv t=slave_period i=iidsi k=slave_kramp)
      `slave_answer_symbol(d=crm_data_dsi__ch__[11:8]  src=idsi__ch___wv t=slave_period i=iidsi k=slave_kramp)
      `slave_answer_symbol(d=crm_data_dsi__ch__[7:4]   src=idsi__ch___wv t=slave_period i=iidsi k=slave_kramp) 
      `slave_answer_symbol(d=crm_data_dsi__ch__[3:0]   src=idsi__ch___wv t=slave_period i=iidsi k=slave_kramp)
    `slave_answer_symbol_end()
    
    		`if simcase[62]
    		  `set_vdpi(name=vdpi_dsi__ch__)
    		`endif
    
    `wait(t=300`u)
  
    `spi_packet_begin(ch=__ch__)
      `spi_read_ic_status()
      `set_var(name=crm_data val=crm_data_dsi__ch__)
      `spi_read_dsi_data(c=2**__ch__)
    `spi_packet_end(ch=__ch__)
    
    `set_var(name=crm_dsi__ch___pending       val=0)
    `set_var(name=crm_dsi__ch___slave_pending val=0)
    
    `set_var(name=dsi__ch___use_model val=0)

    `if "__ch__" eq "2"
      `calc(name=T__del_RXD1_01__ expr=slave_answer_rxd1_t_01 x=slave_kramp xunit=-)
      `calc(name=T__del_RXD1_10__ expr=slave_answer_rxd1_t_10 x=slave_kramp xunit=-)
      `calc(name=T__del_RXD1_02__ expr=slave_answer_rxd1_t_02 x=slave_kramp xunit=-)
      `calc(name=T__del_RXD1_20__ expr=slave_answer_rxd1_t_20 x=slave_kramp xunit=-)
      `calc(name=T__del_RXD2_02__ expr=slave_answer_rxd2_t_02 x=slave_kramp xunit=-)
      `calc(name=T__del_RXD2_20__ expr=slave_answer_rxd2_t_20 x=slave_kramp xunit=-)
      `calc(name=T__del_RXD2_12__ expr=slave_answer_rxd2_t_12 x=slave_kramp xunit=-)
      `calc(name=T__del_RXD2_21__ expr=slave_answer_rxd2_t_21 x=slave_kramp xunit=-)
    `endif
    
  `endalways
  
enddefine

**----------

`crm_dsi(ch=0)
`crm_dsi(ch=1)
  
**------------------------------------------------
** DSI Configuration
**------------------------------------------------

define quiescent_current_check(__ch__=)
  
  `var(name=quiescent_current_checker_dsi__ch___trigger type=reg)
  `var(name=quiescent_current_checker_dsi__ch___d       type=reg [4:0])
  `var(name=quiescent_current_checker_dsi__ch___r)

  `always(name=Quiescent current check)
  
    `cross_d(name=quiescent_current_checker_dsi__ch__ s=xtbctrl.quiescent_current_checker_dsi__ch___trigger dir=1 t=1`k)
  
    `meas_i( name  = I__DSI__ch___LOAD__
             p     = xdut.dsi__ch___p
             print = 0)
  
    `spi_read_register(name=DSI_LOAD block=DSI___ch__ mask=0)
    `set_var(name=quiescent_current_checker_dsi__ch___d val=spi_read_word[4:0])
    *set_var(name=quiescent_current_checker_dsi__ch___r val=quiescent_current_checker_dsi__ch___d)
    `set_var(name=quiescent_current_checker_dsi__ch___r val=spi_read_word[4:0])
    
    `calc( name = dI__DSI__ch___LOAD__
           expr = -200`u * quiescent_current_checker_dsi__ch___r - I__DSI__ch___LOAD__ 
           min  = -500`u
           typ  = 0
           max  = 500`u)
  
    `wait(t=1`n)
    
    `set_var(name=quiescent_current_checker_dsi__ch___trigger val=0)
  
  `endalways

enddefine

`quiescent_current_check(ch=1)
`quiescent_current_check(ch=0)

**----------

define dsi_cfg(__clkref__=1)

  `spi_write_register(name=SUP_CTRL    block=SUPPLY     data=0)
  `spi_write_register(name=SUP_CTRL    block=SUPPLY     data=1)
  `spi_write_register(name=DSI_ENABLE  block=DSI_COMMON data=3)
  `spi_write_register(name=DSI_CFG     block=DSI_COMMON data=4*bittime+chiptime)
  `spi_write_register(name=CRM_TIME    block=DSI_COMMON data=450*2**bittime)
  `spi_write_register(name=CRM_TIME_NR block=DSI_COMMON data=300*2**bittime)
  
  `set_var(name=slave_period val=2`u+chiptime*1`u)
  
  `if __clkref__
    `set_var(name=master_period  val=8`u*2**bittime/clkref_freq*500`k)
  `else
    `set_var(name=master_period  val=8`u*2**bittime/clkosc_freq*18`M)
  `endif
  `set_var(name=master_slave_gap val=5*master_period)
  
  `spi_dsi_iquietcomp(c=3)
  `wait(t=200`u)
  `set_var(name=quiescent_current_checker_dsi1_trigger val=1)
  `wait(t=100`u)
  `set_var(name=quiescent_current_checker_dsi0_trigger val=1)
  `wait(t=100`u)
  
  `wait(t=1`m)

enddefine
  
**------------------------------------------------
** Main
**------------------------------------------------

define crm(__ch__=0 __dsiaddr__=$urandom_range(2**4,0) __dsicmd__=$urandom_range(2**4,0) __extdata__=$urandom_range(2**8,0) __data__=$urandom_range(2**8,0) __crc__=$urandom_range(2**8,0) __wait__=4`m __clkref__=1 __use_model__=1)

  `if "$SPSCR_MACROTYPE" eq "SV"
    if (slave_period > (1`u * slave_kramp) + 0.5`u) begin
      if (crm_dsi__ch___pending) begin $display("\tDSI__ch__ wait for free slot"); @(crm_dsi__ch___pending); end
      #(10`u);
  `endif

  `set_var(name=crm_data_dsi__ch__[31:28] val=__dsiaddr__)
  `set_var(name=crm_data_dsi__ch__[27:24] val=__dsicmd__)
  `set_var(name=crm_data_dsi__ch__[23:16] val=__extdata__)
  `set_var(name=crm_data_dsi__ch__[15:8]  val=__data__)
  `set_var(name=crm_data_dsi__ch__[7:0]   val=__crc__)
  
  `set_var(name=crm_dsi__ch___pending         val=1)
  `set_var(name=crm_dsi__ch___decoder_pending val=1)
  
  `set_var(name=dsi__ch___use_model val=__use_model__)
  
  `wait(t=__wait__+1`u print=0)
  
  `if "$SPSCR_MACROTYPE" eq "SV"    
    end
  `endif
  
enddefine

**----------

define crm_all(__data1__='hbeef __data2__='hface __wait__=4`m __clkref__=1 __use_model__=1)

  `if "$SPSCR_MACROTYPE" eq "SV"
    if (slave_period > (1`u * slave_kramp) + 0.5`u) begin
  `endif
  
  `set_var(name=crm_data_dsi1[31:16] val=__data1__)
  `set_var(name=crm_data_dsi0[31:16] val=__data1__)
  `set_var(name=crm_data_dsi1[15:0]  val=__data2__)
  `set_var(name=crm_data_dsi0[15:0]  val=__data2__)
    
  `set_var(name=crm_dsi1_slave_pending val=1)
  `set_var(name=crm_dsi0_slave_pending val=1)
    
  `set_var(name=crm_dsi1_decoder_pending val=1)
  `set_var(name=crm_dsi0_decoder_pending val=1)
  
  `set_var(name=dsi1_use_model  val=__use_model__)
  `set_var(name=dsi0_use_model  val=__use_model__)
    
  `spi_transmit_crm(c=15 data1=__data1__ data2=__data2__)
  `wait(t=4`m print=0)
  
  `set_var(name=dsi1_use_model val=0)
  `set_var(name=dsi0_use_model val=0)
  
  `spi_read_ic_status()
    
  `ic_state_mon()
  
  `if "$SPSCR_MACROTYPE" eq "SV"    
    end
  `endif
  
enddefine

**------------------------------------------------
**------------------------------------------------
