
**------------------------------------------------
** Patter-Explorer
**------------------------------------------------

define pe_tm(__task__ __block__= __use_model__=1)

  `if __use_model__
    `set_vsrc(src=vdab_i_model_en   v=1 print=0)
    `set_vsrc(src=vbfwb_i_model_en  v=1 print=0)
    `set_vsrc(src=vsyncb_i_model_en v=1 print=0)
    `set_vsrc(src=vintb_o_model_en  v=1 print=0)
  `endif
  `wait(t=10`u print=0)
  
  `pe_task(inst=jtag1 block=__block__ task=__task__)

  `if __use_model__
    `set_vsrc(src=vdab_i_model_en   v=0 print=0)
    `set_vsrc(src=vbfwb_i_model_en  v=0 print=0)
    `set_vsrc(src=vsyncb_i_model_en v=0 print=0)
    `set_vsrc(src=vintb_o_model_en  v=0 print=0)
  `endif
  `wait(t=10`u print=0)

enddefine

**------------------------------------------------
** Address Concept (to be improved)
**------------------------------------------------

* Appl addresses:
*   Compiled by digital flow: $PROJECT_DIR/DIGITAL/tb_easier_uvm/registers/addresses_pkg.sv

* Test addresses:
*   EDF stove export + additional scitping for addresses and bitfields: $SPSCR_PRJ/edf/m521.44a.reg_export.sv
*   Base addresses included: $PROJECT_DIR/DIGITAL/config/base_addresses_test.sv

**----------

`if "$SPSCR_MACROTYPE" eq "SVDEF"
  `include "$SPSCR_PRJ/lib/m521.44a.reg_edfexport.sv"
  `include "$PROJECT_DIR/DIGITAL/config/base_addresses_test.sv"
`endif

**------------------------------------------------
** TMR Access
**------------------------------------------------

define set_bitfield(__name__ __val__=0)

  *comment(Set TM bitfield __name__ __val__)
  `set_var(name=__name__ val=__val__)

enddefine

**----------

`include "$SPSCR_TB/tb/tm_sup.gpp"
`include "$SPSCR_TB/tb/tm_dsi.gpp"
`include "$SPSCR_TB/tb/tm_timebase.gpp"
`include "$SPSCR_TB/tb/tm_pads.gpp"
`include "$SPSCR_TB/tb/tm.gpp"

**------------------------------------------------
** Common
**------------------------------------------------

`jtag_master_init(w_ir=8 w_dr=32)

**----------

`var(name=jtag_addr         type=reg [7:0])
`var(name=jtag_addr_string  type=reg [128*8:1])
`var(name=jtag_block_string type=reg [128*8:1])
`var(name=jtag_wdata        type=reg [31:0])
`var(name=jtag_rdata        type=reg [31:0])
`var(name=jtag_mask         type=reg [31:0])
`var(name=jtag_read_trigger type=reg)

**----------

`always(name=JTAG Read Register Content)
  
  `cross_d(name=cross_jtag_read_trigger s=xtbctrl.jtag_read_trigger dir=1 t=1`k)
  
  `set_var(name=jtag_wdata val=jtag_master_wdata & jtag_mask)
  `set_var(name=jtag_rdata val=jtag_master_rdata & jtag_mask)

  `calc( name = jtag_read_diff
         expr = jtag_rdata - jtag_wdata
	 min  = -0.5
	 typ  = 0
	 max  = 0.5)

  `set_var(name=jtag_read_trigger val=0)
  
`endalways

**----------

define jtag_access(__ir__ __data__ __mask__=0 __w_ir__=8 __w_dr__=32 __f__=fjtag  __use_model__=1 __read__=0 __init__=0)
  
  `if __use_model__ && models[0] && models[17]
  
    `set_vsrc(src=vdab_i_model_en   v=1 print=0)
    `set_vsrc(src=vbfwb_i_model_en  v=1 print=0)
    `set_vsrc(src=vsyncb_i_model_en v=1 print=0)
    `set_vsrc(src=vintb_o_model_en  v=1 print=0)
  
    `jtag_master( vtms      = vdab_i_model
                  vtck      = vbfwb_i_model
	          vtdi      = vsyncb_i_model
	          tdo       = xdut.xdigi.O_INTB
                  ir        = __ir__
                  data      = __data__
                  w_ir      = __w_ir__
                  w_dr      = __w_dr__
	          f         = __f__
	          v         = vvio
	          type      = logic
		  lsb_first = 1
		  read      = __read__
		  init      = __init__)
  
    `set_vsrc(src=vdab_i_model_en   v=0 print=0)
    `set_vsrc(src=vbfwb_i_model_en  v=0 print=0)
    `set_vsrc(src=vsyncb_i_model_en v=0 print=0)
    `set_vsrc(src=vintb_o_model_en  v=0 print=0)
  
  `else
  
    `jtag_master( vtms      = vdab
                  vtck      = vbfwb
	          vtdi      = vsyncb
	          tdo       = intb_pcb
                  ir        = __ir__
                  data      = __data__
                  w_ir      = __w_ir__
                  w_dr      = __w_dr__
	          f         = __f__
	          v         = vvio
		  lsb_first = 1
		  read      = __read__
		  init      = __init__)
		     	     
  `endif
  
  `set_var(name=jtag_mask         val=__mask__)
  `set_var(name=jtag_read_trigger val=1)
  `wait(t=1`u print=0)
  
enddefine

**------------------------------------------------
** JTAG Applicative Register Read Access
**------------------------------------------------

define jtag_read_register(__name__ __block__ __data__=0 __mask__='hffffffff __pkg__=addresses_pkg:: __use_model__=1 __print__=1 __init__=0)
  
  `if __print__
    *comment(JTAG read register __block__.__name__)
  `endif
  
  `set_var(name=jtag_addr         val=__pkg__ADDR___block_____name__)
  `set_var(name=jtag_addr_string  val="__name__")
  `set_var(name=jtag_block_string val="__block__")
  `set_var(name=jtag_wdata val=0)
  `set_var(name=jtag_wdata[31:16] val=__pkg__ADDR___block_____name__)
  
  `jtag_access( ir        = IR_ELIP_RDF
		data      = jtag_wdata
		mask      = __mask__
                w_dr      = 32
		use_model = __use_model__
		read      = 1
		init      = __init__)

enddefine

**------------------------------------------------
** JTAG Applicative Register Write Access
**------------------------------------------------

define jtag_write_register(__name__ __block__ __data__=0 __mask__='hffffffff __pkg__=addresses_pkg:: __use_model__=1 __init__=0)

  *comment(JTAG write register __block__.__name__ __data__)
  
  `set_var(name=jtag_addr         val=__pkg__ADDR___block_____name__)
  `set_var(name=jtag_addr_string  val="__name__")
  `set_var(name=jtag_block_string val="__block__")
  `set_var(name=jtag_wdata val=0)
  `set_var(name=jtag_wdata[31:16] val=__pkg__ADDR___block_____name__)
  `set_var(name=jtag_wdata[15:0]  val=__data__)
  
  `jtag_access( ir        = IR_ELIP_WRF
		data      = jtag_wdata
                w_dr      = 32
		use_model = __use_model__
		init      = __init__)
  
  *jtag_access( ir        = IR_ELIP_WRF
                *data      = jtag_wdata
		*mask      = __mask__
                *w_dr      = 32
		*use_model = __use_model__
		*read = 1)
 
enddefine

**------------------------------------------------
** JTAG Test Register Access
**------------------------------------------------

define jtag_write_testreg(__name__ __block__ __mask__='hffffffff __use_model__=1 __comment__= __init__=0)

		  *Alyways process to be done priorily
  `wait(t=1`n print=0)

  *comment(JTAG write test register __block__.__name__ __comment__)
  
  `set_var(name=jtag_addr         val=BASE_ADDR_TEST___block__ + addr___name__)
  `set_var(name=jtag_addr_string  val="__name__")
  `set_var(name=jtag_block_string val="__block__")
  `set_var(name=jtag_wdata        val=data___name__)
  
  `jtag_access( ir        = BASE_ADDR_TEST___block__ + addr___name__
		data      = jtag_wdata
		mask      = __mask__
                w_dr      = 16
		use_model = __use_model__
		init      = __init__)
 
enddefine

**------------------------------------------------
**------------------------------------------------
